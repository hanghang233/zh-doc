{"remainingRequest":"/Users/xiaohanghang/Desktop/front/code/zh-doc/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/xiaohanghang/Desktop/front/code/zh-doc/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/xiaohanghang/Desktop/front/code/zh-doc/docs/VUE/SingleSPA/A000.md?vue&type=template&id=07eeb5dc&","dependencies":[{"path":"/Users/xiaohanghang/Desktop/front/code/zh-doc/docs/VUE/SingleSPA/A000.md","mtime":1581571682000},{"path":"/Users/xiaohanghang/Desktop/front/code/zh-doc/node_modules/cache-loader/dist/cjs.js","mtime":1581571682000},{"path":"/Users/xiaohanghang/Desktop/front/code/zh-doc/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1581571684000},{"path":"/Users/xiaohanghang/Desktop/front/code/zh-doc/node_modules/cache-loader/dist/cjs.js","mtime":1581571682000},{"path":"/Users/xiaohanghang/Desktop/front/code/zh-doc/node_modules/vue-loader/lib/index.js","mtime":1581571684000},{"path":"/Users/xiaohanghang/Desktop/front/code/zh-doc/node_modules/@vuepress/markdown-loader/index.js","mtime":1581571682000}],"contextDependencies":[],"result":["\n<ContentSlotsDistributor :slot-key=\"$parent.slotKey\"><h1 id=\"single-spa\"><a class=\"header-anchor\" href=\"#single-spa\" aria-hidden=\"true\">#</a> Single-SPA</h1>\n<div class=\"tip custom-block\"><p class=\"custom-block-title\">契子</p>\n<ul>\n<li>微前端服务：将 Web 应用由单一的单体应用转变为多个小型前端应用聚合为一的应用。各个前端应用还可以独立运行、独立开发、独立部署。</li>\n<li>监听路由变化，匹配url对应的路由，加载相应资源</li>\n<li>主项目只有一个html入口，子项目通过主项目来按需加载，子系统间切换不再刷新</li>\n<li>主项目加载子项目中需要公共加载的包，子项目只有自己的业务代码，打包出来的dist很少</li>\n</ul>\n</div>\n<h2 id=\"_01-设计理念\"><a class=\"header-anchor\" href=\"#_01-设计理念\" aria-hidden=\"true\">#</a> &amp;01.设计理念</h2>\n<p>1.中心化路由</p>\n<p>在前端应用中路由是中心，因为有了路由才能展示相应的界面。在基于single-spa的微前端项目中我们需要一个地方去管理我们的应用，即：发现存在哪些应用，这些应用都对应了哪个路由，在特定的路由先去加载这个应用对应的资源</p>\n<p>2.标识化应用</p>\n<p>给每个应用都起一个唯一的名字。</p>\n<p>3.独立配置与配置自动化</p>\n<h2 id=\"_02-前端入口项目\"><a class=\"header-anchor\" href=\"#_02-前端入口项目\" aria-hidden=\"true\">#</a> &amp;02.前端入口项目</h2>\n<p>前端入口项目不写业务代码，只写业务系统相关的配置，注册各个业务项目以及加载各个业务项目的资源，入口项目只有一个html文件，在业务项目处于激活状态时，将业务项目的dom树挂载到入口项目的html中</p>\n<h2 id=\"_03-业务项目\"><a class=\"header-anchor\" href=\"#_03-业务项目\" aria-hidden=\"true\">#</a> &amp;03.业务项目</h2>\n<p>按需加载。对应相应js资源</p>\n<ul>\n<li>systemJs：通用模块加载器</li>\n</ul>\n<p>CommonJS：同步加载模块器（module.exports）;</p>\n<p>AMD: 异步加载模块，为浏览器环境设计，RequireJS即为遵循AMD规范的模块化工具，requireJS的基本思想是，通过define方法定义模块化，通过require加载模块。</p>\n<ul>\n<li>子项目配置umd格式输出</li>\n</ul>\n<p>https://segmentfault.com/a/1190000019920162</p>\n<p><img src=\"./img/singlespa1.png\" alt=\"npm-script\"></p>\n<ul>\n<li>路由匹配</li>\n</ul>\n<p>从url hash值后开始进行子项目的路由匹配</p>\n<ul>\n<li>优化打包配置</li>\n</ul>\n<p>将公用依赖包放入主项目引入，提高打包效率</p>\n<!--beforebegin--><div class=\"language-bash line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>chainWebpack: config <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    config.externals<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'vue'</span>, <span class=\"token punctuation\">{</span><span class=\"token string\">'vue-router'</span><span class=\"token keyword\">:</span><span class=\"token string\">'vueRouter'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    config.output\n        .libraryTarget<span class=\"token punctuation\">(</span><span class=\"token string\">'umd'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>,\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br></div><!--beforeend--></div><!--afterend--></ContentSlotsDistributor>\n",null]}
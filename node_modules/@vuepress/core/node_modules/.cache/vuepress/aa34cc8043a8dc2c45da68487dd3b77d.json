{"remainingRequest":"/Users/xiaohanghang/Desktop/front/code/zh-doc/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/xiaohanghang/Desktop/front/code/zh-doc/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/xiaohanghang/Desktop/front/code/zh-doc/docs/VUE/Console/A004.md?vue&type=template&id=d4b3c89a&","dependencies":[{"path":"/Users/xiaohanghang/Desktop/front/code/zh-doc/docs/VUE/Console/A004.md","mtime":1581571682000},{"path":"/Users/xiaohanghang/Desktop/front/code/zh-doc/node_modules/cache-loader/dist/cjs.js","mtime":1581571682000},{"path":"/Users/xiaohanghang/Desktop/front/code/zh-doc/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1581571684000},{"path":"/Users/xiaohanghang/Desktop/front/code/zh-doc/node_modules/cache-loader/dist/cjs.js","mtime":1581571682000},{"path":"/Users/xiaohanghang/Desktop/front/code/zh-doc/node_modules/vue-loader/lib/index.js","mtime":1581571684000},{"path":"/Users/xiaohanghang/Desktop/front/code/zh-doc/node_modules/@vuepress/markdown-loader/index.js","mtime":1581571682000}],"contextDependencies":[],"result":["\n<ContentSlotsDistributor :slot-key=\"$parent.slotKey\"><h1 id=\"a004-vue组件精讲\"><a class=\"header-anchor\" href=\"#a004-vue组件精讲\" aria-hidden=\"true\">#</a> A004_VUE组件精讲</h1>\n<div class=\"tip custom-block\"><p class=\"custom-block-title\">契子</p>\n<ul>\n<li>掘金小册子</li>\n<li>解藕组件的交互逻辑，尽量把复杂的逻辑分发到不同的子组件中</li>\n</ul>\n</div>\n<h2 id=\"组件的通信1：provide-inject\"><a class=\"header-anchor\" href=\"#组件的通信1：provide-inject\" aria-hidden=\"true\">#</a> 组件的通信1：provide/inject</h2>\n<p>provide / inject 是 Vue.js 2.2.0 版本后新增的 API</p>\n<p>这对选项需要一起使用，以允许一个祖先组件向其所有子孙后代注入一个依赖，不论组件层次有多深，并在起上下游关系成立的时间里始终生效。如果你熟悉 React，这与 React 的上下文特性很相似。</p>\n<p>provide 和 inject 主要为高阶插件/组件库提供用例。并不推荐直接用于应用程序代码中。</p>\n<!--beforebegin--><div class=\"language-bash line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>// A.vue\n<span class=\"token function\">export</span> default <span class=\"token punctuation\">{</span>\n  provide: <span class=\"token punctuation\">{</span>\n    name: <span class=\"token string\">'Aresn'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n// B.vue\n<span class=\"token function\">export</span> default <span class=\"token punctuation\">{</span>\n  inject: <span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span>,\n  mounted <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console.log<span class=\"token punctuation\">(</span>this.name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  // Aresn\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br></div><!--beforeend--></div><!--afterend--><p>需要注意的是，provide 和 inject 绑定并不是可响应的。</p>\n<p>黑科技一：在app.vue通过provide对外提供，页面中所有组件通过inject都可以访问app.vue中的方法。比如登陆状态/用户信息等；可结合mixins使用，实现多人开发</p>\n<p>黑科技二：独立组件中使用，具有联动关系的组件</p>\n<h2 id=\"组件的通信1：派发与广播——自行实现-dispatch-和-broadcast-方法\"><a class=\"header-anchor\" href=\"#组件的通信1：派发与广播——自行实现-dispatch-和-broadcast-方法\" aria-hidden=\"true\">#</a> 组件的通信1：派发与广播——自行实现 dispatch 和 broadcast 方法</h2>\n<p>因为基于组件树结构的事件流方式有时让人难以理解，并且在组件结构扩展的过程中会变得越来越脆弱。</p>\n<p>但是在独立开发组件库中，可以很好的使用。</p>\n<h2 id=\"具有数据校验功能的表单组件——form\"><a class=\"header-anchor\" href=\"#具有数据校验功能的表单组件——form\" aria-hidden=\"true\">#</a> 具有数据校验功能的表单组件——Form</h2>\n<p>Form组件概览--vue中的组件渲染顺序是由内而外的</p>\n</ContentSlotsDistributor>\n",null]}
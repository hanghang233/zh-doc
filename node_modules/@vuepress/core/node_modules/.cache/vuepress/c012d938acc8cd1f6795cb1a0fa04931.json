{"remainingRequest":"/Users/xiaohanghang/Desktop/front/code/zh-doc/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/xiaohanghang/Desktop/front/code/zh-doc/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/xiaohanghang/Desktop/front/code/zh-doc/docs/NOTE/Front/webpack.md?vue&type=template&id=c3b460c6&","dependencies":[{"path":"/Users/xiaohanghang/Desktop/front/code/zh-doc/docs/NOTE/Front/webpack.md","mtime":1582340743000},{"path":"/Users/xiaohanghang/Desktop/front/code/zh-doc/node_modules/cache-loader/dist/cjs.js","mtime":1581571682000},{"path":"/Users/xiaohanghang/Desktop/front/code/zh-doc/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1581571684000},{"path":"/Users/xiaohanghang/Desktop/front/code/zh-doc/node_modules/cache-loader/dist/cjs.js","mtime":1581571682000},{"path":"/Users/xiaohanghang/Desktop/front/code/zh-doc/node_modules/vue-loader/lib/index.js","mtime":1581571684000},{"path":"/Users/xiaohanghang/Desktop/front/code/zh-doc/node_modules/@vuepress/markdown-loader/index.js","mtime":1581571682000}],"contextDependencies":[],"result":["\n<ContentSlotsDistributor :slot-key=\"$parent.slotKey\"><h1 id=\"webpack\"><a class=\"header-anchor\" href=\"#webpack\" aria-hidden=\"true\">#</a> webpack--</h1>\n<div class=\"tip custom-block\"><p class=\"custom-block-title\">契子</p>\n<ul>\n<li>webpack</li>\n<li>https://juejin.im/post/5cae0f616fb9a068a93f0613#heading-3</li>\n<li>devDependencies用于本地环境开发，开发环境会使用；dependencies，生产环境和开发环境都会使用</li>\n<li>核心优化：代码分割、懒加载</li>\n</ul>\n</div>\n<h2 id=\"_01-output-entry基础\"><a class=\"header-anchor\" href=\"#_01-output-entry基础\" aria-hidden=\"true\">#</a> &amp;01.output/entry基础</h2>\n<p>JavaScript的模块打包工具，通过分析模块之间的依赖，最终将所有的模块打包成一份或者多份代码包，供HTML直接使用。</p>\n<ul>\n<li>\n<p>webpack4 引入了production（生产）和development（开发）模式</p>\n</li>\n<li>\n<p>webpack打包AMD文件\nwebpack在打包AMD文件时，会单独打出一个bundle.js包出来，这和AMD的写法有关系；在实际写代码中，最好使用ES6和CommonJS规范来写\n<img src=\"./imgs/webpack/amd_dist.jpeg\" alt=\"npm-script\"></p>\n</li>\n<li>\n<p>webpack再编译时，先删除dist文件，再生成新的文件：clean-webpack-plugin</p>\n</li>\n</ul>\n<h2 id=\"_02-用babel7转译es6\"><a class=\"header-anchor\" href=\"#_02-用babel7转译es6\" aria-hidden=\"true\">#</a> &amp;02.用Babel7转译ES6</h2>\n<p>并非每一个浏览器都知道如何处理ES6。</p>\n<p>webpack需要使用babel-loader转译</p>\n<h2 id=\"_03-code-splitting\"><a class=\"header-anchor\" href=\"#_03-code-splitting\" aria-hidden=\"true\">#</a> &amp;03.Code Splitting</h2>\n<p>webpack打包，默认会把业务代码和三方框架代码一起打包，每次请求时文件会很大。尤其是业务代码改动频繁，每次上线后都会重新请求资源。第一次加载之后，浏览器第二次请求时，如果文件大小没有变化，会默认取缓存里面的文件。</p>\n<p>这里把业务代码和三方框架代码分割开，这样页面刷新或者第二次进入的时候，可以加快网页加载速度</p>\n<ul>\n<li>webpack4 引入splitChunksPlugins，是webpack主模块中的一个细小模块，无需npm引入</li>\n<li>业务代码和三方资源代码或者公共文件分开，使其和业务代码分开缓存，极大的提高效率</li>\n<li>可用做提取公共代码</li>\n</ul>\n<ul>\n<li>splitChunksPlugins详细配置\n1、chunks默认async，只会分割异步代码。如果写的是import资源，再加业务代码，会被看作是同步代码</li>\n</ul>\n<!--beforebegin--><div class=\"language-bash line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>optimization: <span class=\"token punctuation\">{</span>\n  splitChunks: <span class=\"token punctuation\">{</span>\n    chunks: <span class=\"token string\">'async'</span>,   //webpack默认配置；all代表分割同步和异步代码\n    minSize: 30000,\n    maxSize: 0,\n    minChunks: 1,\n    maxAsyncRequests: 5,\n    maxInitialRequests: 3,\n    automaticNameDelimiter: <span class=\"token string\">'~'</span>,\n    name: true,\n    cacheGroups: <span class=\"token punctuation\">{</span>\n      vendors: <span class=\"token punctuation\">{</span>\n        test: /<span class=\"token punctuation\">[</span>\\\\/<span class=\"token punctuation\">]</span>node_modules<span class=\"token punctuation\">[</span>\\\\/<span class=\"token punctuation\">]</span>/,\n        priority: -10    //优先级\n      <span class=\"token punctuation\">}</span>,\n      default: <span class=\"token punctuation\">{</span>\n        minChunks: 2,\n        priority: -20,\n        reuseExistingChunk: <span class=\"token boolean\">true</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br></div><!--beforeend--></div><!--afterend--><p>解析流程：比如要分割vue或者Jquery其他三方框架，如果满足前面minSize等条件配置，进入cacheGroups=》根据cacheGroups中的配置，决定vue或者Jquery是否打包成一个文件或者分开打包=》vendors配置node_modules中的三方框架代码</p>\n<p>如果想要分开打某个资源包--注意priority的优先级</p>\n<!--beforebegin--><div class=\"language-bash line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>cacheGroups: <span class=\"token punctuation\">{</span>\n  //单独分离某三方框架包\n  lodash: <span class=\"token punctuation\">{</span>\n    name: <span class=\"token string\">'lodash'</span>,\n    test: /<span class=\"token punctuation\">[</span>\\\\/<span class=\"token punctuation\">]</span>node_modules<span class=\"token punctuation\">[</span>\\\\/<span class=\"token punctuation\">]</span>lodash<span class=\"token punctuation\">[</span>\\\\/<span class=\"token punctuation\">]</span>/,\n    priority: 10  // 优先级要大于 vendors 不然会被打包进 vendors\n  <span class=\"token punctuation\">}</span>,\n  //提取公共代码\n  commons: <span class=\"token punctuation\">{</span>\n    name: <span class=\"token string\">'commons'</span>,\n    minSize: 0, //表示在压缩前的最小模块大小,默认值是 30kb\n    minChunks: 2, // 最小公用次数\n    priority: 5, // 优先级\n    reuseExistingChunk: <span class=\"token boolean\">true</span> // 公共模块必开启\n  <span class=\"token punctuation\">}</span>,\n  vendors: <span class=\"token punctuation\">{</span>\n    name: <span class=\"token string\">'vendors'</span>,   //在默认设置中，会将node_mudules中的模块打入到dist/vendors中\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>,\n\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br></div><!--beforeend--></div><!--afterend--><p>打包之后对比：\n<img src=\"./imgs/webpack/code-split1.jpeg\" alt=\"npm-script\">\n<img src=\"./imgs/webpack/code-split2.jpeg\" alt=\"npm-script\"></p>\n<h2 id=\"_04-lazy-loading-和prefetch\"><a class=\"header-anchor\" href=\"#_04-lazy-loading-和prefetch\" aria-hidden=\"true\">#</a> &amp;04.lazy loading 和prefetch</h2>\n<ul>\n<li>按需加载</li>\n<li>webpack只是能够识别import语法，能进行代码分割；注意一些低版本浏览器可能不支持promise，就要使用 babel 以及 babel-polyfill 来做转换</li>\n<li>注意代码使用率</li>\n</ul>\n<!--beforebegin--><div class=\"language-bash line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>//模拟按需加载\ndocument.getElementById<span class=\"token punctuation\">(</span><span class=\"token string\">'btn'</span><span class=\"token punctuation\">)</span>.addEventListener<span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span>, function<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console.log<span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    //为动态生成的 Chunk 赋予一个名称，以方便我们追踪和调试代码。 如果不指定动态生成的 Chunk 的名称，默认名称将会是  <span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span>.js\n    //use-lodash为动态生成的业务代码\n    import<span class=\"token punctuation\">(</span>/* webpackChunkName: <span class=\"token string\">'use-lodash'</span>*/ <span class=\"token string\">'lodash'</span><span class=\"token punctuation\">)</span>.then<span class=\"token punctuation\">(</span>function<span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console.log<span class=\"token punctuation\">(</span>_.join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'1'</span>, <span class=\"token string\">'2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">))</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br></div><!--beforeend--></div><!--afterend--><p>页面呈现：点击按钮之后，才会加载loadsh三方库和use-lodash业务文件</p>\n<ul>\n<li>另一种情况：如果首页所需资源加载完成，但是业务代码没有加载，用户点击之后可能会出现等待很久的情况--webpackPrefetch/webpackPreload</li>\n</ul>\n<p>webpackPrefetch：会等待核心代码加载完之后，有空闲之后再去加载</p>\n<p>webpackPreload：会和核心的代码并行加载，还是不推荐</p>\n<h2 id=\"_05-自动生成html文件\"><a class=\"header-anchor\" href=\"#_05-自动生成html文件\" aria-hidden=\"true\">#</a> &amp;05.自动生成html文件</h2>\n<ul>\n<li>npm i html-webpack-plugin html-loader --save-dev</li>\n<li>打包之后自动生成index.html文件，并且自动引入js文件</li>\n</ul>\n<!--beforebegin--><div class=\"language-bash line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>output: <span class=\"token punctuation\">{</span>\n    publicPath: <span class=\"token string\">'./'</span>, // js 引用的路径或者 CDN 地址\n    path: path.resolve<span class=\"token punctuation\">(</span>__dirname, <span class=\"token string\">'dist'</span><span class=\"token punctuation\">)</span>, // 打包文件的输出目录--index.html 引入js文件时，配置相对路径\n    filename: <span class=\"token string\">'[name].bundle.js'</span>, // 打包后生产的 js 文件\n    chunkFilename: <span class=\"token string\">'[name].js'</span>    //代码拆分后的文件名\n  <span class=\"token punctuation\">}</span>,\n//自动生成html文件并引入js\nplugins: <span class=\"token punctuation\">[</span>\n  new HtmlWebpackPlugin<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    title: <span class=\"token string\">'测试webpack-demo'</span>,\n    minify: <span class=\"token punctuation\">{</span>\n      // 压缩 HTML 文件\n      removeComments: true, // 移除 HTML 中的注释\n      collapseWhitespace: true, // 删除空白符与换行符\n      minifyCSS: <span class=\"token boolean\">true</span> // 压缩内联 css\n    <span class=\"token punctuation\">}</span>,\n    filename: <span class=\"token string\">'index.html'</span>, // 生成后的文件名\n    template: <span class=\"token string\">'index.html'</span> // 根据此模版生成 HTML 文件\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">]</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br></div><!--beforeend--></div><!--afterend--><h2 id=\"_06-处理css-scss文件\"><a class=\"header-anchor\" href=\"#_06-处理css-scss文件\" aria-hidden=\"true\">#</a> &amp;06.处理css/scss文件</h2>\n<ul>\n<li>跟babel一样，webpack不知道要将css提取到文件中，需要loader来实现</li>\n<li>css-loader：负责解析css中的代码，主要是为了处理css的依赖，例如@import和url()等引用外部的声明</li>\n<li>style-loader：将css-loader解析的结果转变成js代码，运行时动态插入style标签来让css生效</li>\n</ul>\n<p>webpack.config.js</p>\n<!--beforebegin--><div class=\"language-bash line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>//配置loader加载器\n  module: <span class=\"token punctuation\">{</span>\n    rules: <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        test: /\\.css$/, // 针对 .css 后缀的文件设置 loader\n        use: <span class=\"token punctuation\">[</span><span class=\"token string\">'style-loader'</span>, <span class=\"token string\">'css-loader'</span><span class=\"token punctuation\">]</span> // 使用 loader\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>,\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br></div><!--beforeend--></div><!--afterend--><!--beforebegin--><div class=\"language-bash line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>//index.js引入样式\n  <span class=\"token function\">import</span> style from <span class=\"token string\">'./css/base.css'</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div><!--beforeend--></div><!--afterend--><ul>\n<li>\n<p>打包之后可发现，index.html中已动态插入style标签样式；如果想要动态单独生成css文件，需要引入mini-css-extract-plugin（webpack4使用）；引入optimize-css-assets-webpack-plugin，进行css代码压缩</p>\n</li>\n<li>\n<p>为css加上浏览器前缀，安装 postcss-loader 和 autoprefixer 依赖</p>\n</li>\n</ul>\n<!--beforebegin--><div class=\"language-bash line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code> //使用postcss为浏览器加上前缀\n<span class=\"token punctuation\">{</span>\n  loader: <span class=\"token string\">'postcss-loader'</span>,\n  options: <span class=\"token punctuation\">{</span>\n    plugins: <span class=\"token punctuation\">[</span>require<span class=\"token punctuation\">(</span><span class=\"token string\">'autoprefixer'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br></div><!--beforeend--></div><!--afterend--><h2 id=\"_10-面试之-什么是webpack、原理是什么、如何打包\"><a class=\"header-anchor\" href=\"#_10-面试之-什么是webpack、原理是什么、如何打包\" aria-hidden=\"true\">#</a> &amp;10.面试之--什么是webpack、原理是什么、如何打包</h2>\n<p>webpack是一个打包模块化JavaScript的工具，在webpack里面一切文件皆模块，通过loader转换文件，通过plugin转换钩子，最后输出由多个模块组合成的文件。</p>\n<p>webpack可以看作是模块打包机：分析项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等），并将其打包为合适的格式以供浏览器使用。</p>\n<h2 id=\"_11-面试之-什么是loader，什么是plugins\"><a class=\"header-anchor\" href=\"#_11-面试之-什么是loader，什么是plugins\" aria-hidden=\"true\">#</a> &amp;11.面试之--什么是loader，什么是plugins</h2>\n<p>loaders是用来告诉webpack如何转化处理某一类型的文件，并且引入到打包的文件中；plugins自定义webpack打包过程的方式，一个插件是含有apply方法的一个对象，通过这个方法可以参与到整个webpack打包的各个流程(生命周期)。</p>\n<p>常见的loaders；</p>\n<ol>\n<li>\n<p>css-loader：加载css，支持模块化、压缩、文件导入等特性</p>\n</li>\n<li>\n<p>source-map-loader：加载额外的source-map文件，以方便断点调试</p>\n</li>\n<li>\n<p>babel-loader：把ES6转为ES5</p>\n</li>\n</ol>\n<p>常见的plugins：</p>\n<ol>\n<li>\n<p>html-webpack-plugin：简化html文件创建</p>\n</li>\n<li>\n<p>uglifyjs-webpack-plugin：通过UglifyES压缩ES6代码</p>\n</li>\n<li>\n<p>webpack-bundle-analyzer: 可视化webpack输出文件的体积</p>\n</li>\n</ol>\n</ContentSlotsDistributor>\n",null]}
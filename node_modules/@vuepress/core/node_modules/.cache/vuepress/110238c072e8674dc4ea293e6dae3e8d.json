{"remainingRequest":"/Users/cassie/Desktop/work2/person/zh_doc/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/cassie/Desktop/work2/person/zh_doc/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/cassie/Desktop/work2/person/zh_doc/docs/NOTE/Front/tech.md?vue&type=template&id=1e11ae2a&","dependencies":[{"path":"/Users/cassie/Desktop/work2/person/zh_doc/docs/NOTE/Front/tech.md","mtime":1578302138663},{"path":"/Users/cassie/Desktop/work2/person/zh_doc/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cassie/Desktop/work2/person/zh_doc/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/cassie/Desktop/work2/person/zh_doc/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cassie/Desktop/work2/person/zh_doc/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/cassie/Desktop/work2/person/zh_doc/node_modules/@vuepress/markdown-loader/index.js","mtime":1546968779000}],"contextDependencies":[],"result":["\n<ContentSlotsDistributor :slot-key=\"$parent.slotKey\"><h1 id=\"面试题总结\"><a class=\"header-anchor\" href=\"#面试题总结\" aria-hidden=\"true\">#</a> 面试题总结</h1>\n<div class=\"tip custom-block\"><p class=\"custom-block-title\">契子</p>\n<ul>\n<li>专业技术：CSS、 JS 语法、HTTP 基础、三大框架、浏览器原理和前端安全，与实际业务联系</li>\n<li>前端性能优化、Node.js 工具链、异常监控和部署</li>\n<li>对业务系统的理解、研发流程的推进、开发难题的攻关和团队协作的实践</li>\n<li>https://juejin.im/post/5e11ef3b6fb9a0483a135fa7#heading-28</li>\n<li>https://juejin.im/post/5de11deb5188256eaa0ebd5e</li>\n<li>https://juejin.im/post/5df5bcea6fb9a016091def69</li>\n</ul>\n</div>\n<h2 id=\"_01-promise\"><a class=\"header-anchor\" href=\"#_01-promise\" aria-hidden=\"true\">#</a> &amp;01.Promise</h2>\n<ul>\n<li>promise微任务队列和执行顺序</li>\n<li>event loop:主线程从“任务队列”中循环读取任务</li>\n</ul>\n<p>https://juejin.im/post/5dcb775c518825574d214b89</p>\n<h2 id=\"_02-浏览器缓存机制\"><a class=\"header-anchor\" href=\"#_02-浏览器缓存机制\" aria-hidden=\"true\">#</a> &amp;02.浏览器缓存机制</h2>\n<ul>\n<li>缓存是浏览器的一种缓存机制，可以把请求过的web资源（html，js，css）拷贝一份副本存储在浏览器中，并选择请求配置是否使用该副本</li>\n</ul>\n<p>缓存作用：减少浏览器带宽/减少服务器压力/减少网络延迟，提高用户体验</p>\n<ul>\n<li>meta可设置页面是否采用缓存</li>\n</ul>\n<p>https://juejin.im/post/5dccbfca518825599563c645</p>\n<h2 id=\"_03-vue-vue中的组件为什么是函数\"><a class=\"header-anchor\" href=\"#_03-vue-vue中的组件为什么是函数\" aria-hidden=\"true\">#</a> &amp;03.vue--vue中的组件为什么是函数</h2>\n<p>vue中的组件是可以被复用的，一个组件被创建好之后，就可能被用在各个地方，而组件不管被复用了多少次，组件中的data都应该是相互隔离，不受影响的。基于JavaScript特性设计。</p>\n<!--beforebegin--><div class=\"language-bash line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>var Component <span class=\"token operator\">=</span> function<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nComponent.prototype.data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    message: <span class=\"token string\">'Love'</span>\n<span class=\"token punctuation\">}</span>\nvar component1 <span class=\"token operator\">=</span> new Component<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>,\n    component2 <span class=\"token operator\">=</span> new Component<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncomponent1.data.message <span class=\"token operator\">=</span> <span class=\"token string\">'Peace'</span><span class=\"token punctuation\">;</span>\nconsole.log<span class=\"token punctuation\">(</span>component2.data.message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  // Peace\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br></div><!--beforeend--></div><!--afterend--><!--beforebegin--><div class=\"language-bash line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>var Component <span class=\"token operator\">=</span> function<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    this.data <span class=\"token operator\">=</span> this.data<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\nComponent.prototype.data <span class=\"token operator\">=</span> function<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        message: <span class=\"token string\">'Love'</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\nvar component1 <span class=\"token operator\">=</span> new Component<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>,\n    component2 <span class=\"token operator\">=</span> new Component<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncomponent1.data.message <span class=\"token operator\">=</span> <span class=\"token string\">'Peace'</span><span class=\"token punctuation\">;</span>\nconsole.log<span class=\"token punctuation\">(</span>component2.data.message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br></div><!--beforeend--></div><!--afterend--><h2 id=\"_03-vue-v-show和v-if的区别\"><a class=\"header-anchor\" href=\"#_03-vue-v-show和v-if的区别\" aria-hidden=\"true\">#</a> &amp;03.vue--v-show和v-if的区别</h2>\n<p>1.v-show是css级别控制display属性，v-if是控制dom层是否渲染</p>\n<p>2.v-show：适用于频繁操作操作dom隐藏/显示，v-if适用于一次性渲染完</p>\n<p>3.v-if场景优化：当值为false时，内部组件不会被渲染，所以在特定条件再渲染部分组件的时候，可以将v-if设置为false，有条件时渲染，这样可以让重要的组件先渲染，合理利用，进行性能优化</p>\n<h2 id=\"_04-vue-web-components组件\"><a class=\"header-anchor\" href=\"#_04-vue-web-components组件\" aria-hidden=\"true\">#</a> &amp;04.vue--web components组件</h2>\n<ul>\n<li>\n<p>浏览器web components组件：一种定制的，可以在web app和web页面中使用并复用的元素，可适用于任何框架</p>\n</li>\n<li>\n<p>通过Vue CLI3和新的@vue/web-component-wrapper库创建web components十分方便。\n@vue/web-component-wrapper库提供了一个通过web componentAPI接入Vue组件的容器。这个容器能够自动代理properties，attributes，events和slot。</p>\n</li>\n</ul>\n<p>https://cli.vuejs.org/zh/guide/build-targets.html</p>\n<h2 id=\"_05-vue-渲染列表时，“key属性的作用和重要性”\"><a class=\"header-anchor\" href=\"#_05-vue-渲染列表时，“key属性的作用和重要性”\" aria-hidden=\"true\">#</a> &amp;05.vue--渲染列表时，“key属性的作用和重要性”</h2>\n<ul>\n<li>\n<p>渲染项目列表时，key属性允许vue跟踪每个vnode节点，key值是必须唯一的</p>\n</li>\n<li>\n<p>因为vue渲染列表是采用“就地复用”的策略，当更改列表时，不是上下移动元素位置，而是使用更新的元素节点来反映更改。重点体现在：列表排序上</p>\n</li>\n</ul>\n<h2 id=\"_06-vue-相关源码推荐\"><a class=\"header-anchor\" href=\"#_06-vue-相关源码推荐\" aria-hidden=\"true\">#</a> &amp;06.vue--相关源码推荐</h2>\n<p>1.https://github.com/PanJiaChen/vue-element-admin</p>\n<p>2.https://github.com/d2-projects/d2-admin</p>\n<p>3.https://juejin.im/post/5df7b9346fb9a0163307451b</p>\n<p>https://juejin.im/post/5df9fe6be51d45583c1cc3f7</p>\n</ContentSlotsDistributor>\n",null]}
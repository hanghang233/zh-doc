{"remainingRequest":"/Users/cassie/Desktop/work2/person/zh_doc/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/cassie/Desktop/work2/person/zh_doc/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/cassie/Desktop/work2/person/zh_doc/docs/VUE/Console/A002.md?vue&type=template&id=d4b59a16&","dependencies":[{"path":"/Users/cassie/Desktop/work2/person/zh_doc/docs/VUE/Console/A002.md","mtime":1569405736393},{"path":"/Users/cassie/Desktop/work2/person/zh_doc/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cassie/Desktop/work2/person/zh_doc/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/cassie/Desktop/work2/person/zh_doc/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cassie/Desktop/work2/person/zh_doc/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/cassie/Desktop/work2/person/zh_doc/node_modules/@vuepress/markdown-loader/index.js","mtime":1546968779000}],"contextDependencies":[],"result":["\n<ContentSlotsDistributor :slot-key=\"$parent.slotKey\"><h1 id=\"a001-vue源码解析（二）-小节\"><a class=\"header-anchor\" href=\"#a001-vue源码解析（二）-小节\" aria-hidden=\"true\">#</a> A001_VUE源码解析（二）--小节</h1>\n<h2 id=\"object-defineproperty\"><a class=\"header-anchor\" href=\"#object-defineproperty\" aria-hidden=\"true\">#</a> Object.defineProperty</h2>\n<p>定义data数据--可观测</p>\n<h2 id=\"响应式追踪原理的依赖收集追踪原理\"><a class=\"header-anchor\" href=\"#响应式追踪原理的依赖收集追踪原理\" aria-hidden=\"true\">#</a> 响应式追踪原理的依赖收集追踪原理</h2>\n<p><img src=\"./img/A002/watcher.png\" alt=\"npm-script\"></p>\n<p>依赖收集：刚开始，我们都知道data用Object.defineProperty来定义。当一个获取一个数据的时候，会触发reactiveGetter把当前的watcher对象加入队列当中，收集到Dep类当中去。如果该数据被改写，会触发reactiveGetter方法，通过Dep类中的通知函数，触发所有watcher对象的update函数。</p>\n<p>总结：get进行依赖收集，set通过观察者来更新视图</p>\n<h2 id=\"实现virtual-dom下的一个vnode节点\"><a class=\"header-anchor\" href=\"#实现virtual-dom下的一个vnode节点\" aria-hidden=\"true\">#</a> 实现Virtual Dom下的一个VNode节点</h2>\n<p>vue中，render function会将节点转为VNode节点。virtual dom实际上就是一颗以JavaScript对象为基础的一颗dom树，用对象属性来描述节点，实际上只是一层对dom层的抽象，然后通过一系列的操作映射到真实环境上，因为virtual dom是以JavaScript作为依赖，因此具有垮平台性。</p>\n<p><img src=\"./img/A002/Vnode.png\" alt=\"npm-script\"></p>\n<h2 id=\"template模版是如何通过compile编译的\"><a class=\"header-anchor\" href=\"#template模版是如何通过compile编译的\" aria-hidden=\"true\">#</a> template模版是如何通过Compile编译的</h2>\n<h2 id=\"template模版是如何通过compile编译的-2\"><a class=\"header-anchor\" href=\"#template模版是如何通过compile编译的-2\" aria-hidden=\"true\">#</a> template模版是如何通过Compile编译的</h2>\n<p>diff算法：通过同层的树节点进行比较而非对树进行逐层搜索遍历的方式，所以时间负责度只有O(n)，得到差异之后，会将这些差异更新到视图上</p>\n</ContentSlotsDistributor>\n",null]}
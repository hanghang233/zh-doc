{"remainingRequest":"/Users/cassie/Desktop/work2/person/zh_doc/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/cassie/Desktop/work2/person/zh_doc/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/cassie/Desktop/work2/person/zh_doc/docs/VUE/Console/A003.md?vue&type=template&id=d4b4b158&","dependencies":[{"path":"/Users/cassie/Desktop/work2/person/zh_doc/docs/VUE/Console/A003.md","mtime":1569399374924},{"path":"/Users/cassie/Desktop/work2/person/zh_doc/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cassie/Desktop/work2/person/zh_doc/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/cassie/Desktop/work2/person/zh_doc/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cassie/Desktop/work2/person/zh_doc/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/cassie/Desktop/work2/person/zh_doc/node_modules/@vuepress/markdown-loader/index.js","mtime":1546968779000}],"contextDependencies":[],"result":["\n<ContentSlotsDistributor :slot-key=\"$parent.slotKey\"><h1 id=\"a001-vue知识点整合\"><a class=\"header-anchor\" href=\"#a001-vue知识点整合\" aria-hidden=\"true\">#</a> A001_VUE知识点整合</h1>\n<ol>\n<li>\n<p>你知道vue的模板语法用的是哪个web模板引擎的吗？说说你对这模板引擎的理解</p>\n</li>\n<li>\n<p>v-model的原理</p>\n</li>\n</ol>\n<p>v-model实际上是一种语法糖。利用1）v-bind绑定响应式数据；2）绑定change函数</p>\n<ol start=\"3\">\n<li>计算属性可以和data同名吗</li>\n</ol>\n<p>不能，因为prop/computed/data 的数据都会挂载到vm上面</p>\n<ol start=\"4\">\n<li>\n<p>对于不会更改的数据，可以定义到created中，提高性能。因为vue中定义的data数据，定义之后会加入到响应式系统里面。</p>\n</li>\n<li>\n<p>描述vue的响应式系统</p>\n</li>\n</ol>\n<p>简单来说就是使用Object.defineProperty这个API为数据设置get和set。当读取到某个属性时，触发get将读取它的组件对应的render watcher收集起来；当重置赋值时，触发set通知组件重新渲染页面。如果数据的类型是数组的话，还做了单独的处理，对可以改变数组自身的方法进行重写，因为这些方法不是通过重新赋值改变的数组，不会触发set，所以要单独处理。响应系统也有自身的不足，所以官方给出了$set和$delete来弥补。</p>\n<ol start=\"6\">\n<li>为什么v-for里建议为每一项绑定key，而且最好具有唯一性，而不建议使用index？</li>\n</ol>\n<p>在diff比对内部做更新子节点时，会根据oldVnode内没有处理的节点得到一个key值和下标对应的对象集合，为的就是当处理vnode每一个节点时，能快速查找该节点是否是已有的节点，从而提高整个diff比对的性能。如果是一个动态列表，key值最好能保持唯一性，但像轮播图那种不会变更的列表，使用index也是没问题的。</p>\n<ol start=\"7\">\n<li>说下自定义事件的机制。</li>\n</ol>\n<p>子组件使用this.$emit触发事件时，会在当前实例的事件中心去查找对应的事件，然后执行它。不过这个事件回调是在父组件的作用域里定义的，所以$emit里的参数会传递给父组件的回调函数，从而完成父子组件通信。</p>\n<ol start=\"8\">\n<li>Vue extend组件构造函数--定义命令式组件</li>\n</ol>\n<p>https://juejin.im/post/5d8249636fb9a06afe12cd67</p>\n<p>知识点：extend/promise/$mount</p>\n<p>在 vue 项目中，我们有了初始化的根实例后，所有页面基本上都是通过 router 来管理，组件也是通过 import 来进行局部注册，所以组件的创建我们不需要去关注，相比 extend 要更省心一点点。但是这样做会有几个缺点：</p>\n<p>组件模板都是事先定义好的，如果我要从接口动态渲染组件怎么办？\n所有内容都是在 #app 下渲染，注册组件都是在当前位置渲染。如果我要实现一个类似于 window.alert() 提示组件要求像调用 JS 函数一样调用它，该怎么办？\n这时候，Vue.extend + vm.$mount 组合就派上用场了。</p>\n</ContentSlotsDistributor>\n",null]}
{"remainingRequest":"/Users/cassie/Desktop/work2/person/zh_doc/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/cassie/Desktop/work2/person/zh_doc/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/cassie/Desktop/work2/person/zh_doc/docs/NOTE/Front/others-note.md?vue&type=template&id=91f19be4&","dependencies":[{"path":"/Users/cassie/Desktop/work2/person/zh_doc/docs/NOTE/Front/others-note.md","mtime":1581433221657},{"path":"/Users/cassie/Desktop/work2/person/zh_doc/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cassie/Desktop/work2/person/zh_doc/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/cassie/Desktop/work2/person/zh_doc/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cassie/Desktop/work2/person/zh_doc/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/cassie/Desktop/work2/person/zh_doc/node_modules/@vuepress/markdown-loader/index.js","mtime":1546968779000}],"contextDependencies":[],"result":["\n<ContentSlotsDistributor :slot-key=\"$parent.slotKey\"><h1 id=\"其他总结\"><a class=\"header-anchor\" href=\"#其他总结\" aria-hidden=\"true\">#</a> 其他总结--</h1>\n<div class=\"tip custom-block\"><p class=\"custom-block-title\">契子</p>\n<ul>\n<li></li>\n</ul>\n</div>\n<h2 id=\"_01-通信类\"><a class=\"header-anchor\" href=\"#_01-通信类\" aria-hidden=\"true\">#</a> &amp;01.通信类</h2>\n<ul>\n<li>\n<p>什么是同源策略及其限制\n不是一个源的文档无法操作另一个不同源的文档：无法操作cookie、无法操作dom、ajax请求不能操作</p>\n</li>\n<li>\n<p>前后端如何通信\nAjax、WebSocket、CORS</p>\n</li>\n<li>\n<p>如何创建Ajax\nXMLHttpRequest对象的工作流程、兼容处理、事件的触发条件、事件的触发顺序</p>\n</li>\n<li>\n<p>跨域通信的几种方法\nJSONP--利用script异步加载，指定callback函数名，服务器返回之后，执行函数</p>\n<p>Hash--场景是当前页面A，被使用iframe嵌入到页面B，修改iframe.src的值；window.onhashchange</p>\n<p>postMessage--h5通信标准</p>\n<p>WebSocket、CORS</p>\n</li>\n</ul>\n<h2 id=\"_02-渲染机制\"><a class=\"header-anchor\" href=\"#_02-渲染机制\" aria-hidden=\"true\">#</a> &amp;02.渲染机制</h2>\n<ul>\n<li>\n<p>什么是DOCTYPE及作用\n直接告诉浏览器什么是DTD，DOCTYPE是用来声明文档类型和DTD规范，一个主要的用途就是文件的合法性验证，如果文件代码不合法，那么浏览器解析时便会出错。</p>\n<p>常见的DOCTYPE有哪些？\n<img src=\"./imgs/doctype.png\" alt=\"npm-script\">\nHTML4.01有严格模式和宽松模式；</p>\n</li>\n<li>\n<p>浏览器渲染过程</p>\n<ol>\n<li>浏览器解析元素，通过html parser将元素解析为DOM Tree；</li>\n<li>浏览器解析css，通过css parser将css解析为style Rules；</li>\n<li>Dom Tree和style Rules结合，生成Render Tree(这里只是包含结构和样式，并不包括内容和元素位置等具体信息)；</li>\n<li>Render Tree与Layout结合，教给浏览器paint</li>\n</ol>\n</li>\n<li>\n<p>重排reflow\nreflow概念；什么情况触发reflow；什么情况避免触发reflow--尽量避免修改到dom元素位置结构等；</p>\n</li>\n<li>\n<p>重绘Repaint\n定义；触发条件；如何最小程度的repaint--尽量创建fragment片段，一次性添加到页面中</p>\n</li>\n<li>\n<p>布局Layout</p>\n</li>\n</ul>\n<h2 id=\"_03-js渲染机制\"><a class=\"header-anchor\" href=\"#_03-js渲染机制\" aria-hidden=\"true\">#</a> &amp;03.js渲染机制</h2>\n<ul>\n<li>\n<p>如何理解js单线程\n一定时间只能执行一项任务，不能执行多项任务</p>\n<p>原因：作为浏览器脚本语言，JavaScript的主要用途是与用户互动，以及操作DOM，这决定了它只能是单线程，</p>\n</li>\n<li>\n<p>js任务队列\n为了要执行的代码，就有一个JavaScript的任务队列\n同步任务和异步任务</p>\n</li>\n<li>\n<p>Event Loop</p>\n</li>\n</ul>\n<h2 id=\"_04-强缓存与弱缓存\"><a class=\"header-anchor\" href=\"#_04-强缓存与弱缓存\" aria-hidden=\"true\">#</a> &amp;04.强缓存与弱缓存</h2>\n<p>缓存可以简单的分为两种类型：强缓存(200 from cache)和协商缓存(304)</p>\n<p>区别简述如下：</p>\n<pre><code>* 强缓存（200 from cache）时，浏览器如果判断本地缓存未过期，就直接使用，无需发起http请求（expired与cache-control）\n* 协商缓存（304）时，浏览器会向服务端发起http请求（带上上一次服务器给你的标记），拿着标记与现在资源的标记进行对比，然后服务端告诉浏览器文件未改变，让浏览器使用本地缓存\n</code></pre>\n<p>对于协商缓存，使用强制刷新就可以让缓存无效；但是对于强缓存，在未过期时，必须更新资源路径才能发起新的请求。</p>\n<p>完整的协商缓存过程：发请求--&gt;看资源是否过期--&gt;过期--&gt;请求服务器--&gt;服务器对比资源是否真的过期--&gt;没过期--&gt;返回304状态码--&gt;客户端用缓存的老资源。</p>\n</ContentSlotsDistributor>\n",null]}
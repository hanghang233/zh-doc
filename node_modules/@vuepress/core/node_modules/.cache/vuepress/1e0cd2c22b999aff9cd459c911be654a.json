{"remainingRequest":"/Users/xiaohanghang/Desktop/front/code/zh-doc/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/xiaohanghang/Desktop/front/code/zh-doc/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/xiaohanghang/Desktop/front/code/zh-doc/docs/NOTE/Front/others-note.md?vue&type=template&id=91f19be4&","dependencies":[{"path":"/Users/xiaohanghang/Desktop/front/code/zh-doc/docs/NOTE/Front/others-note.md","mtime":1582814219000},{"path":"/Users/xiaohanghang/Desktop/front/code/zh-doc/node_modules/cache-loader/dist/cjs.js","mtime":1581571682000},{"path":"/Users/xiaohanghang/Desktop/front/code/zh-doc/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1581571684000},{"path":"/Users/xiaohanghang/Desktop/front/code/zh-doc/node_modules/cache-loader/dist/cjs.js","mtime":1581571682000},{"path":"/Users/xiaohanghang/Desktop/front/code/zh-doc/node_modules/vue-loader/lib/index.js","mtime":1581571684000},{"path":"/Users/xiaohanghang/Desktop/front/code/zh-doc/node_modules/@vuepress/markdown-loader/index.js","mtime":1581571682000}],"contextDependencies":[],"result":["\n<ContentSlotsDistributor :slot-key=\"$parent.slotKey\"><h1 id=\"其他总结\"><a class=\"header-anchor\" href=\"#其他总结\" aria-hidden=\"true\">#</a> 其他总结--</h1>\n<div class=\"tip custom-block\"><p class=\"custom-block-title\">契子</p>\n<ul>\n<li></li>\n</ul>\n</div>\n<h2 id=\"_01-通信类\"><a class=\"header-anchor\" href=\"#_01-通信类\" aria-hidden=\"true\">#</a> &amp;01.通信类</h2>\n<ul>\n<li>\n<p>什么是同源策略及其限制\n不是一个源的文档无法操作另一个不同源的文档：无法操作cookie、无法操作dom、ajax请求不能操作</p>\n</li>\n<li>\n<p>前后端如何通信\nAjax、WebSocket、CORS</p>\n</li>\n<li>\n<p>如何创建Ajax\nXMLHttpRequest对象的工作流程、兼容处理、事件的触发条件、事件的触发顺序</p>\n</li>\n<li>\n<p>跨域通信的几种方法\nJSONP--利用script异步加载，指定callback函数名，服务器返回之后，执行函数</p>\n<p>Hash--场景是当前页面A，被使用iframe嵌入到页面B，修改iframe.src的值；window.onhashchange</p>\n<p>postMessage--h5通信标准</p>\n<p>WebSocket、CORS</p>\n</li>\n</ul>\n<h2 id=\"_02-渲染机制\"><a class=\"header-anchor\" href=\"#_02-渲染机制\" aria-hidden=\"true\">#</a> &amp;02.渲染机制</h2>\n<ul>\n<li>\n<p>什么是DOCTYPE及作用\n直接告诉浏览器什么是DTD，DOCTYPE是用来声明文档类型和DTD规范，一个主要的用途就是文件的合法性验证，如果文件代码不合法，那么浏览器解析时便会出错。</p>\n<p>常见的DOCTYPE有哪些？\n<img src=\"./imgs/doctype.png\" alt=\"npm-script\">\nHTML4.01有严格模式和宽松模式；</p>\n</li>\n<li>\n<p>浏览器渲染过程</p>\n<ol>\n<li>浏览器解析元素，通过html parser将元素解析为DOM Tree；</li>\n<li>浏览器解析css，通过css parser将css解析为style Rules；</li>\n<li>Dom Tree和style Rules结合，生成Render Tree(这里只是包含结构和样式，并不包括内容和元素位置等具体信息)；</li>\n<li>Render Tree与Layout结合，教给浏览器paint</li>\n</ol>\n</li>\n<li>\n<p>重排reflow\nreflow概念；什么情况触发reflow；什么情况避免触发reflow--尽量避免修改到dom元素位置结构等；</p>\n</li>\n<li>\n<p>重绘Repaint\n定义；触发条件；如何最小程度的repaint--尽量创建fragment片段，一次性添加到页面中</p>\n</li>\n<li>\n<p>布局Layout</p>\n</li>\n</ul>\n<h2 id=\"_03-js渲染机制\"><a class=\"header-anchor\" href=\"#_03-js渲染机制\" aria-hidden=\"true\">#</a> &amp;03.js渲染机制</h2>\n<ul>\n<li>\n<p>如何理解js单线程\n一定时间只能执行一项任务，不能执行多项任务</p>\n<p>原因：作为浏览器脚本语言，JavaScript的主要用途是与用户互动，以及操作DOM，这决定了它只能是单线程，</p>\n</li>\n<li>\n<p>js任务队列\n为了要执行的代码，就有一个JavaScript的任务队列</p>\n<p>同步任务和异步任务</p>\n<p>异步任务：setTimeout和setInterval 、监听DOM、promise</p>\n</li>\n<li>\n<p>Event Loop\njs主线程会不停的从执行栈(同步队列)中读取事件，执行完毕之后，会去查看任务队列是否有任务。</p>\n<p>宏任务队列：setTimeout、setInterval、XHLHttpRequest</p>\n<p>微任务队列：promise</p>\n<p>微任务队列优先级高于宏任务队列</p>\n<!--beforebegin--><div class=\"language-bash line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>  setTimeout<span class=\"token punctuation\">((</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    console.log<span class=\"token punctuation\">(</span>1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>, 0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nnew Promise<span class=\"token punctuation\">((</span>resolve<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    console.log<span class=\"token punctuation\">(</span>2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    resolve<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>.then<span class=\"token punctuation\">((</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    console.log<span class=\"token punctuation\">(</span>3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole.log<span class=\"token punctuation\">(</span>4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   //2、4、3、1\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br></div><!--beforeend--></div><!--afterend--><!--beforebegin--><div class=\"language-bash line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>    <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    setTimeout<span class=\"token punctuation\">((</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        console.log<span class=\"token punctuation\">(</span><span class=\"token string\">'任务队列函数1'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>, 0<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>let i <span class=\"token operator\">=</span> 0<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> 5000<span class=\"token punctuation\">;</span> i++<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console.log<span class=\"token punctuation\">(</span><span class=\"token string\">'a的for循环'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    console.log<span class=\"token punctuation\">(</span><span class=\"token string\">'a事件执行完'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    setTimeout<span class=\"token punctuation\">((</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        console.log<span class=\"token punctuation\">(</span><span class=\"token string\">'任务队列函数2'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>, 0<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>let i <span class=\"token operator\">=</span> 0<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> 5000<span class=\"token punctuation\">;</span> i++<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console.log<span class=\"token punctuation\">(</span><span class=\"token string\">'b的for循环'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    console.log<span class=\"token punctuation\">(</span><span class=\"token string\">'b事件执行完'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">let</span> c <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    setTimeout<span class=\"token punctuation\">((</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        console.log<span class=\"token punctuation\">(</span><span class=\"token string\">'任务队列函数3'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>, 0<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>let i <span class=\"token operator\">=</span> 0<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> 5000<span class=\"token punctuation\">;</span> i++<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console.log<span class=\"token punctuation\">(</span><span class=\"token string\">'c的for循环'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    console.log<span class=\"token punctuation\">(</span><span class=\"token string\">'c事件执行完'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    a<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    b<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    c<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    // 输出最后的结果\n    答案：\n    <span class=\"token punctuation\">(</span>5000<span class=\"token punctuation\">)</span>a的for循环\n    a事件执行完\n    <span class=\"token punctuation\">(</span>5000<span class=\"token punctuation\">)</span>b的for循环\n    b事件执行完\n    <span class=\"token punctuation\">(</span>5000<span class=\"token punctuation\">)</span>c的for循环\n    c事件执行完\n    任务队列函数1\n    任务队列函数2\n    任务队列函数3\n    //结果是当a、b、c函数都执行完成之后，三个setTimeout才会依次执行\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br><span class=\"line-number\">30</span><br><span class=\"line-number\">31</span><br><span class=\"line-number\">32</span><br><span class=\"line-number\">33</span><br><span class=\"line-number\">34</span><br><span class=\"line-number\">35</span><br><span class=\"line-number\">36</span><br><span class=\"line-number\">37</span><br><span class=\"line-number\">38</span><br><span class=\"line-number\">39</span><br><span class=\"line-number\">40</span><br><span class=\"line-number\">41</span><br><span class=\"line-number\">42</span><br><span class=\"line-number\">43</span><br><span class=\"line-number\">44</span><br><span class=\"line-number\">45</span><br></div><!--beforeend--></div><!--afterend--><p>哪些语句放入异步队列</p>\n<p>理解语句进入异步队列的时机</p>\n</li>\n</ul>\n<h2 id=\"_04-强缓存与弱缓存\"><a class=\"header-anchor\" href=\"#_04-强缓存与弱缓存\" aria-hidden=\"true\">#</a> &amp;04.强缓存与弱缓存</h2>\n<p>缓存可以简单的分为两种类型：强缓存(200 from cache)和协商缓存(304)</p>\n<p>区别简述如下：</p>\n<pre><code>* 强缓存（200 from cache）时，浏览器如果判断本地缓存未过期，就直接使用，无需发起http请求（expired与cache-control）\n* 协商缓存（304）时，浏览器会向服务端发起http请求（带上上一次服务器给你的标记），拿着标记与现在资源的标记进行对比，然后服务端告诉浏览器文件未改变，让浏览器使用本地缓存\n</code></pre>\n<p>对于协商缓存，使用强制刷新就可以让缓存无效；但是对于强缓存，在未过期时，必须更新资源路径才能发起新的请求。</p>\n<p>完整的协商缓存过程：发请求--&gt;看资源是否过期--&gt;过期--&gt;请求服务器--&gt;服务器对比资源是否真的过期--&gt;没过期--&gt;返回304状态码--&gt;客户端用缓存的老资源。</p>\n<h2 id=\"_05-页面性能\"><a class=\"header-anchor\" href=\"#_05-页面性能\" aria-hidden=\"true\">#</a> &amp;05.页面性能</h2>\n<p>https://www.cnblogs.com/smjack/archive/2009/02/24/1396895.html</p>\n<ul>\n<li>\n<p>题目：提升页面性能的方法有哪些</p>\n<p>1、压缩资源合并，减少HTTP请求</p>\n<p>2、非核心代码的异步加载--异步加载的方式--异步加载的区别</p>\n<p>异步加载的方式：1）动态脚本加载；2）script标签添加defer；3）script标签添加async</p>\n<p>异步加载的区别</p>\n<pre><code>  1）defer是在HTML加载完成之后才会执行，如果是多个，按照加载的顺序依次执行；\n\n  2）async是在加载完之后立即执行，如果是多个，执行顺序和加载顺序无关；\n</code></pre>\n<p>3、使用浏览器缓存--缓存的分类--缓存的原理</p>\n<p>缓存的分类--强缓存和协商缓存</p>\n<p>强缓存：expires、cache-control，如果两个都设置，以cache-control为准</p>\n<p>协商缓存：Last-Modified、If-Modified-If-Modified-Since、Etag、If-None-Match</p>\n<p>4、预解析DNS--dns-pre-fetch，大部分浏览器的a标签，默认打开预解析；但是如果连接是https，很多浏览器关闭了预解析</p>\n<p>5、使用CDN：如果一个网站用了n个js、n个css，n个图片，把资源放在cdn上，可以更快的把资源解析出来</p>\n</li>\n</ul>\n<h2 id=\"_06-错误监控类\"><a class=\"header-anchor\" href=\"#_06-错误监控类\" aria-hidden=\"true\">#</a> &amp;06.错误监控类</h2>\n<ul>\n<li>前端错误的分类：即时运行错误(代码错误)、资源加载错误</li>\n</ul>\n<h2 id=\"_07-web-安全\"><a class=\"header-anchor\" href=\"#_07-web-安全\" aria-hidden=\"true\">#</a> &amp;07.web 安全</h2>\n<p>https://github.com/LuckyWinty/fe-weekly-questions/issues/1</p>\n<h2 id=\"_09-浏览器渲染相关\"><a class=\"header-anchor\" href=\"#_09-浏览器渲染相关\" aria-hidden=\"true\">#</a> &amp;09.浏览器渲染相关</h2>\n<p>1.JavaScript会阻塞dom的解析</p>\n<p>当解析的过程遇到script标签，会停止当前解析转而去加载script标签当中的脚本；当处理完脚本之后，浏览器便继续解析HTML文档</p>\n<p>2.关于jquery中的ready函数</p>\n<p>jquery中的ready函数实际上是监听DOMContentLoaded事件，在页面执行完成之后执行，此时页面上的图片、音频资源等可能没有加载完成。这样做的好处是，可以访问到页面上的所有元素，缩短页面的交互时间，提高页面的整体体验</p>\n<p>3.把css放头部，把js放在尾部的原因</p>\n<p>浏览器中的渲染引擎会尝试尽快在屏幕上显示内容，所以不会等到所有的html元素加载完成才去构建和布局dom树，所以部分内容将被解析并显示。</p>\n<p>也就是说，css放在头部，在加载生成dom树的时候，就可以同时对DOM tree进行渲染。这样可以防止闪跳、白屏或者布局混乱</p>\n<p>js放在尾部是因为，js可能会改变DOM tree的结构，所以需要一个稳定的DOM tree</p>\n<h2 id=\"_10-常见的浏览器兼容性问题\"><a class=\"header-anchor\" href=\"#_10-常见的浏览器兼容性问题\" aria-hidden=\"true\">#</a> &amp;10.常见的浏览器兼容性问题</h2>\n<ol>\n<li>不同浏览器的标签默认的外补丁和内补丁不同\n场景：用各个浏览器写，不加样式的情况下，margin和padding的差距比较大</li>\n</ol>\n<p>解决：全局添加 *{margin: 0;padding: 0};</p>\n<ol start=\"2\">\n<li>\n<p>使用meta浏览器来调节浏览器的渲染方式，告诉浏览器以哪种内核渲染，360浏览器就是在ie和chrome之间来回切换。\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\"></p>\n</li>\n<li>\n<p>css3 前缀：用来兼容这些浏览器老版本\n-moz-代表firefox浏览器私有属性/-ms-代表ie浏览器私有属性/-webkit-代表safari、chrome私有属性/-o-代表Opera</p>\n</li>\n<li>\n<p>css3 很多属性不兼容IE8:rgba（用opacity解决）、过渡（用JS动画解决）、background-size</p>\n</li>\n<li>\n<p>快级属性标签float之后，加上同行有元素设置margin，在IE6显示的margin比设置的大</p>\n</li>\n</ol>\n<p>常见：IE6中后面的一块被顶到下一行</p>\n<p>解决：在float的标签样式控制中加入 display:inline;将其转化为行内属性</p>\n<ol start=\"6\">\n<li>事件监听的兼容\n场景：IE不支持addEventListener    解决：给IE添加attachEvent</li>\n</ol>\n<p>场景：IE6789不支持event.arget     解决：event.srcElement</p>\n<p>场景：IE6789不支持e.preventDefault  解决：event.returnValue = false</p>\n<p>场景：IE6789不支持e.stopPropagation  解决：event.cancelBubble = false</p>\n</ContentSlotsDistributor>\n",null]}
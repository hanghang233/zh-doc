{"remainingRequest":"/Users/xiaohanghang/Desktop/front/code/zh-doc/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/xiaohanghang/Desktop/front/code/zh-doc/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/xiaohanghang/Desktop/front/code/zh-doc/docs/NOTE/Front/others-note.md?vue&type=template&id=91f19be4&","dependencies":[{"path":"/Users/xiaohanghang/Desktop/front/code/zh-doc/docs/NOTE/Front/others-note.md","mtime":1581949843000},{"path":"/Users/xiaohanghang/Desktop/front/code/zh-doc/node_modules/cache-loader/dist/cjs.js","mtime":1581571682000},{"path":"/Users/xiaohanghang/Desktop/front/code/zh-doc/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1581571684000},{"path":"/Users/xiaohanghang/Desktop/front/code/zh-doc/node_modules/cache-loader/dist/cjs.js","mtime":1581571682000},{"path":"/Users/xiaohanghang/Desktop/front/code/zh-doc/node_modules/vue-loader/lib/index.js","mtime":1581571684000},{"path":"/Users/xiaohanghang/Desktop/front/code/zh-doc/node_modules/@vuepress/markdown-loader/index.js","mtime":1581571682000}],"contextDependencies":[],"result":["\n<ContentSlotsDistributor :slot-key=\"$parent.slotKey\"><h1 id=\"其他总结\"><a class=\"header-anchor\" href=\"#其他总结\" aria-hidden=\"true\">#</a> 其他总结--</h1>\n<div class=\"tip custom-block\"><p class=\"custom-block-title\">契子</p>\n<ul>\n<li></li>\n</ul>\n</div>\n<h2 id=\"_01-通信类\"><a class=\"header-anchor\" href=\"#_01-通信类\" aria-hidden=\"true\">#</a> &amp;01.通信类</h2>\n<ul>\n<li>\n<p>什么是同源策略及其限制\n不是一个源的文档无法操作另一个不同源的文档：无法操作cookie、无法操作dom、ajax请求不能操作</p>\n</li>\n<li>\n<p>前后端如何通信\nAjax、WebSocket、CORS</p>\n</li>\n<li>\n<p>如何创建Ajax\nXMLHttpRequest对象的工作流程、兼容处理、事件的触发条件、事件的触发顺序</p>\n</li>\n<li>\n<p>跨域通信的几种方法\nJSONP--利用script异步加载，指定callback函数名，服务器返回之后，执行函数</p>\n<p>Hash--场景是当前页面A，被使用iframe嵌入到页面B，修改iframe.src的值；window.onhashchange</p>\n<p>postMessage--h5通信标准</p>\n<p>WebSocket、CORS</p>\n</li>\n</ul>\n<h2 id=\"_02-渲染机制\"><a class=\"header-anchor\" href=\"#_02-渲染机制\" aria-hidden=\"true\">#</a> &amp;02.渲染机制</h2>\n<ul>\n<li>\n<p>什么是DOCTYPE及作用\n直接告诉浏览器什么是DTD，DOCTYPE是用来声明文档类型和DTD规范，一个主要的用途就是文件的合法性验证，如果文件代码不合法，那么浏览器解析时便会出错。</p>\n<p>常见的DOCTYPE有哪些？\n<img src=\"./imgs/doctype.png\" alt=\"npm-script\">\nHTML4.01有严格模式和宽松模式；</p>\n</li>\n<li>\n<p>浏览器渲染过程</p>\n<ol>\n<li>浏览器解析元素，通过html parser将元素解析为DOM Tree；</li>\n<li>浏览器解析css，通过css parser将css解析为style Rules；</li>\n<li>Dom Tree和style Rules结合，生成Render Tree(这里只是包含结构和样式，并不包括内容和元素位置等具体信息)；</li>\n<li>Render Tree与Layout结合，教给浏览器paint</li>\n</ol>\n</li>\n<li>\n<p>重排reflow\nreflow概念；什么情况触发reflow；什么情况避免触发reflow--尽量避免修改到dom元素位置结构等；</p>\n</li>\n<li>\n<p>重绘Repaint\n定义；触发条件；如何最小程度的repaint--尽量创建fragment片段，一次性添加到页面中</p>\n</li>\n<li>\n<p>布局Layout</p>\n</li>\n</ul>\n<h2 id=\"_03-js渲染机制\"><a class=\"header-anchor\" href=\"#_03-js渲染机制\" aria-hidden=\"true\">#</a> &amp;03.js渲染机制</h2>\n<ul>\n<li>\n<p>如何理解js单线程\n一定时间只能执行一项任务，不能执行多项任务</p>\n<p>原因：作为浏览器脚本语言，JavaScript的主要用途是与用户互动，以及操作DOM，这决定了它只能是单线程，</p>\n</li>\n<li>\n<p>js任务队列\n为了要执行的代码，就有一个JavaScript的任务队列</p>\n<p>同步任务和异步任务</p>\n<p>异步任务：setTimeout和setInterval 、监听DOM、promise</p>\n</li>\n<li>\n<p>Event Loop\njs主线程会不停的从执行栈(同步队列)中读取事件，执行完毕之后，会去查看任务队列是否有任务。</p>\n<p>宏任务队列：setTimeout、setInterval、XHLHttpRequest</p>\n<p>微任务队列：promise</p>\n<p>微任务队列优先级高于宏任务队列</p>\n<!--beforebegin--><div class=\"language-bash line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>  setTimeout<span class=\"token punctuation\">((</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    console.log<span class=\"token punctuation\">(</span>1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>, 0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nnew Promise<span class=\"token punctuation\">((</span>resolve<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    console.log<span class=\"token punctuation\">(</span>2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    resolve<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>.then<span class=\"token punctuation\">((</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    console.log<span class=\"token punctuation\">(</span>3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole.log<span class=\"token punctuation\">(</span>4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   //2、4、3、1\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br></div><!--beforeend--></div><!--afterend--><!--beforebegin--><div class=\"language-bash line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>    <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    setTimeout<span class=\"token punctuation\">((</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        console.log<span class=\"token punctuation\">(</span><span class=\"token string\">'任务队列函数1'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>, 0<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>let i <span class=\"token operator\">=</span> 0<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> 5000<span class=\"token punctuation\">;</span> i++<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console.log<span class=\"token punctuation\">(</span><span class=\"token string\">'a的for循环'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    console.log<span class=\"token punctuation\">(</span><span class=\"token string\">'a事件执行完'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    setTimeout<span class=\"token punctuation\">((</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        console.log<span class=\"token punctuation\">(</span><span class=\"token string\">'任务队列函数2'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>, 0<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>let i <span class=\"token operator\">=</span> 0<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> 5000<span class=\"token punctuation\">;</span> i++<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console.log<span class=\"token punctuation\">(</span><span class=\"token string\">'b的for循环'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    console.log<span class=\"token punctuation\">(</span><span class=\"token string\">'b事件执行完'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">let</span> c <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    setTimeout<span class=\"token punctuation\">((</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        console.log<span class=\"token punctuation\">(</span><span class=\"token string\">'任务队列函数3'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>, 0<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>let i <span class=\"token operator\">=</span> 0<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> 5000<span class=\"token punctuation\">;</span> i++<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console.log<span class=\"token punctuation\">(</span><span class=\"token string\">'c的for循环'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    console.log<span class=\"token punctuation\">(</span><span class=\"token string\">'c事件执行完'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    a<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    b<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    c<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    // 输出最后的结果\n    答案：\n    <span class=\"token punctuation\">(</span>5000<span class=\"token punctuation\">)</span>a的for循环\n    a事件执行完\n    <span class=\"token punctuation\">(</span>5000<span class=\"token punctuation\">)</span>b的for循环\n    b事件执行完\n    <span class=\"token punctuation\">(</span>5000<span class=\"token punctuation\">)</span>c的for循环\n    c事件执行完\n    任务队列函数1\n    任务队列函数2\n    任务队列函数3\n    //结果是当a、b、c函数都执行完成之后，三个setTimeout才会依次执行\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br><span class=\"line-number\">30</span><br><span class=\"line-number\">31</span><br><span class=\"line-number\">32</span><br><span class=\"line-number\">33</span><br><span class=\"line-number\">34</span><br><span class=\"line-number\">35</span><br><span class=\"line-number\">36</span><br><span class=\"line-number\">37</span><br><span class=\"line-number\">38</span><br><span class=\"line-number\">39</span><br><span class=\"line-number\">40</span><br><span class=\"line-number\">41</span><br><span class=\"line-number\">42</span><br><span class=\"line-number\">43</span><br><span class=\"line-number\">44</span><br><span class=\"line-number\">45</span><br></div><!--beforeend--></div><!--afterend--><p>哪些语句放入异步队列</p>\n<p>理解语句进入异步队列的时机</p>\n</li>\n</ul>\n<h2 id=\"_04-强缓存与弱缓存\"><a class=\"header-anchor\" href=\"#_04-强缓存与弱缓存\" aria-hidden=\"true\">#</a> &amp;04.强缓存与弱缓存</h2>\n<p>缓存可以简单的分为两种类型：强缓存(200 from cache)和协商缓存(304)</p>\n<p>区别简述如下：</p>\n<pre><code>* 强缓存（200 from cache）时，浏览器如果判断本地缓存未过期，就直接使用，无需发起http请求（expired与cache-control）\n* 协商缓存（304）时，浏览器会向服务端发起http请求（带上上一次服务器给你的标记），拿着标记与现在资源的标记进行对比，然后服务端告诉浏览器文件未改变，让浏览器使用本地缓存\n</code></pre>\n<p>对于协商缓存，使用强制刷新就可以让缓存无效；但是对于强缓存，在未过期时，必须更新资源路径才能发起新的请求。</p>\n<p>完整的协商缓存过程：发请求--&gt;看资源是否过期--&gt;过期--&gt;请求服务器--&gt;服务器对比资源是否真的过期--&gt;没过期--&gt;返回304状态码--&gt;客户端用缓存的老资源。</p>\n<h2 id=\"_05-页面性能\"><a class=\"header-anchor\" href=\"#_05-页面性能\" aria-hidden=\"true\">#</a> &amp;05.页面性能</h2>\n<p>https://www.cnblogs.com/smjack/archive/2009/02/24/1396895.html</p>\n<ul>\n<li>\n<p>题目：提升页面性能的方法有哪些</p>\n<p>1、压缩资源合并，减少HTTP请求--</p>\n<p>2、非核心代码的异步加载--异步加载的方式--异步加载的区别</p>\n<p>异步加载的方式：1）动态脚本加载；2）script标签添加defer；3）script标签添加async</p>\n<p>异步加载的区别</p>\n<pre><code>  1）defer是在HTML加载完成之后才会执行，如果是多个，按照加载的顺序依次执行；\n\n  2）async是在加载完之后立即执行，如果是多个，执行顺序和加载顺序无关；\n</code></pre>\n<p>3、使用浏览器缓存--缓存的分类--缓存的原理</p>\n<p>缓存的分类--强缓存和协商缓存</p>\n<p>强缓存：expires、cache-control，如果两个都设置，以cache-control为准</p>\n<p>协商缓存：Last-Modified、If-Modified-If-Modified-Since、Etag、If-None-Match</p>\n<ul>\n<li>比如：静态资源加hash后缀，根据文件内容计算hash；url和文件内容不变，则会自动触发http缓存机制，返回304</li>\n</ul>\n<p>4、预解析DNS--dns-pre-fetch，大部分浏览器的a标签，默认打开预解析；但是如果连接是https，很多浏览器关闭了预解析</p>\n<p>5、使用CDN：如果一个网站用了n个js、n个css，n个图片，把资源放在cdn上，可以更快的把资源解析出来（根据区域来做服务器的处理）</p>\n<p>6、减少资源体积：压缩代码</p>\n<p>7、减少访问次数：合并代码、SSR服务器端渲染、缓存</p>\n<p>8、节流、防抖</p>\n<ul>\n<li>防抖\n场景一：监听一个输入框，文字变化后触发change事件--在一定时间之后，用户没有操作，js才会执行</li>\n</ul>\n<!--beforebegin--><div class=\"language-bash line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>//防抖\n<span class=\"token keyword\">function</span> debounce<span class=\"token punctuation\">(</span>fn, delay <span class=\"token operator\">=</span>500<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t//timer是闭包中--不能被别人修改\n\t<span class=\"token keyword\">let</span> timer <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> function<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tif<span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tclearTimeout<span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\ttimer <span class=\"token operator\">=</span> setTimeout<span class=\"token punctuation\">((</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n\t\t\tfn.apply<span class=\"token punctuation\">(</span>this, arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\ttimer <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>, delay<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br></div><!--beforeend--></div><!--afterend--><ul>\n<li>节流：使得一定时间内只触发一次函数\n拖拽一个元素时，要随时拿到该元素被拖拽的位置</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"_6-从输入url到渲染出页面的整个过程\"><a class=\"header-anchor\" href=\"#_6-从输入url到渲染出页面的整个过程\" aria-hidden=\"true\">#</a> &amp;6.从输入url到渲染出页面的整个过程</h2>\n<ul>\n<li>加载资源的形式\nhtml代码、媒体文件、JavaScript css</li>\n<li>加载资源的过程</li>\n<li>渲染的过程</li>\n</ul>\n<p>1、DNS解析：域名-》IP地址</p>\n<p>2、浏览器根据IP地址向服务器发起http请求</p>\n<p>3、服务器处理http请求，并返回给浏览器</p>\n<h2 id=\"_7-window-onload和domcontentloaded的区别\"><a class=\"header-anchor\" href=\"#_7-window-onload和domcontentloaded的区别\" aria-hidden=\"true\">#</a> &amp;7.window.onload和DOMContentLoaded的区别</h2>\n<ul>\n<li>load：页面的全部资源加载完才能执行，包括图片等资源</li>\n<li>DOMContentLoaded：页面资源加载完，图片资源等可能没有加载完成</li>\n</ul>\n<h2 id=\"_8-安全\"><a class=\"header-anchor\" href=\"#_8-安全\" aria-hidden=\"true\">#</a> &amp;8.安全</h2>\n<ul>\n<li>常见的web前端攻击方式有哪些\nxss跨域请求攻击：插入script标签，通过js获取cookie信息</li>\n</ul>\n<p>XSRF：用户点击三方链接，携带自身的身份信息--预防：使用</p>\n</ContentSlotsDistributor>\n",null]}
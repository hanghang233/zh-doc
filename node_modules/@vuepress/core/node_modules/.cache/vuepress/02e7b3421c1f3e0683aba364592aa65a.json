{"remainingRequest":"/Users/xiaohanghang/Desktop/front/code/zh-doc/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/xiaohanghang/Desktop/front/code/zh-doc/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/xiaohanghang/Desktop/front/code/zh-doc/docs/NOTE/Front/js-note.md?vue&type=template&id=7f8f1074&","dependencies":[{"path":"/Users/xiaohanghang/Desktop/front/code/zh-doc/docs/NOTE/Front/js-note.md","mtime":1581665997000},{"path":"/Users/xiaohanghang/Desktop/front/code/zh-doc/node_modules/cache-loader/dist/cjs.js","mtime":1581571682000},{"path":"/Users/xiaohanghang/Desktop/front/code/zh-doc/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1581571684000},{"path":"/Users/xiaohanghang/Desktop/front/code/zh-doc/node_modules/cache-loader/dist/cjs.js","mtime":1581571682000},{"path":"/Users/xiaohanghang/Desktop/front/code/zh-doc/node_modules/vue-loader/lib/index.js","mtime":1581571684000},{"path":"/Users/xiaohanghang/Desktop/front/code/zh-doc/node_modules/@vuepress/markdown-loader/index.js","mtime":1581571682000}],"contextDependencies":[],"result":["\n<ContentSlotsDistributor :slot-key=\"$parent.slotKey\"><h1 id=\"js-面试总结\"><a class=\"header-anchor\" href=\"#js-面试总结\" aria-hidden=\"true\">#</a> js--面试总结</h1>\n<div class=\"tip custom-block\"><p class=\"custom-block-title\">契子</p>\n<ul>\n<li>https://github.com/huyaocode/webKnowledge --- 大神面经，值得参考</li>\n<li></li>\n</ul>\n</div>\n<h2 id=\"_01-如何解决异步回调地域\"><a class=\"header-anchor\" href=\"#_01-如何解决异步回调地域\" aria-hidden=\"true\">#</a> &amp;01.如何解决异步回调地域</h2>\n<h2 id=\"_02-说一下类的创建与继承\"><a class=\"header-anchor\" href=\"#_02-说一下类的创建与继承\" aria-hidden=\"true\">#</a> &amp;02.说一下类的创建与继承</h2>\n<p>答：在js中创建一个函数就是创建一个对象，一个对象就是一个类。每一个创建的函数都有一个原型对象，通过原型对象我们可以实现JS类中的继承。</p>\n<ul>\n<li>创建对象有几种方法\n1.构造函数模式\n2.new操作符 + Object创建对象<!--beforebegin--><div class=\"language-bash line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>    var person <span class=\"token operator\">=</span> new Object<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    person.name <span class=\"token operator\">=</span> <span class=\"token string\">\"lisi\"</span><span class=\"token punctuation\">;</span>\n    person.age <span class=\"token operator\">=</span> 21<span class=\"token punctuation\">;</span>\n    person.family <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"lida\"</span>,<span class=\"token string\">\"lier\"</span>,<span class=\"token string\">\"wangwu\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    person.say <span class=\"token operator\">=</span> function<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        alert<span class=\"token punctuation\">(</span>this.name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br></div><!--beforeend--></div><!--afterend-->3.工厂模式--instanceof无法判断它是谁的实例，只能判断它是对象<!--beforebegin--><div class=\"language-bash line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>   <span class=\"token keyword\">function</span> createPerson<span class=\"token punctuation\">(</span>name,age,family<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    var o <span class=\"token operator\">=</span> new Object<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    o.name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    o.age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n    o.family <span class=\"token operator\">=</span> family<span class=\"token punctuation\">;</span>\n    o.say <span class=\"token operator\">=</span> function<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        alert<span class=\"token punctuation\">(</span>this.name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> o<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nvar person1 <span class=\"token operator\">=</span>  createPerson<span class=\"token punctuation\">(</span><span class=\"token string\">\"lisi\"</span>,21,<span class=\"token punctuation\">[</span><span class=\"token string\">\"lida\"</span>,<span class=\"token string\">\"lier\"</span>,<span class=\"token string\">\"wangwu\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   //instanceof无法判断它是谁的实例，只能判断他是对象，构造函数都可以判断出\nvar person2 <span class=\"token operator\">=</span>  createPerson<span class=\"token punctuation\">(</span><span class=\"token string\">\"wangwu\"</span>,18,<span class=\"token punctuation\">[</span><span class=\"token string\">\"lida\"</span>,<span class=\"token string\">\"lier\"</span>,<span class=\"token string\">\"lisi\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole.log<span class=\"token punctuation\">(</span>person1 instanceof Object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                           //true\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br></div><!--beforeend--></div><!--afterend-->4.构造函数模式<!--beforebegin--><div class=\"language-bash line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>   <span class=\"token keyword\">function</span> Person<span class=\"token punctuation\">(</span>name,age,family<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        this.name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n        this.age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n        this.family <span class=\"token operator\">=</span> family<span class=\"token punctuation\">;</span>\n        this.say <span class=\"token operator\">=</span> function<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            alert<span class=\"token punctuation\">(</span>this.name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    var person1 <span class=\"token operator\">=</span> new Person<span class=\"token punctuation\">(</span><span class=\"token string\">\"lisi\"</span>,21,<span class=\"token punctuation\">[</span><span class=\"token string\">\"lida\"</span>,<span class=\"token string\">\"lier\"</span>,<span class=\"token string\">\"wangwu\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    var person2 <span class=\"token operator\">=</span> new Person<span class=\"token punctuation\">(</span><span class=\"token string\">\"lisi\"</span>,21,<span class=\"token punctuation\">[</span><span class=\"token string\">\"lida\"</span>,<span class=\"token string\">\"lier\"</span>,<span class=\"token string\">\"lisi\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console.log<span class=\"token punctuation\">(</span>person1 instanceof Object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> //true\n    console.log<span class=\"token punctuation\">(</span>person1 instanceof Person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> //true\n    console.log<span class=\"token punctuation\">(</span>person2 instanceof Object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> //true\n    console.log<span class=\"token punctuation\">(</span>person2 instanceof Person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> //true\n    console.log<span class=\"token punctuation\">(</span>person1.constructor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      //constructor 属性返回对创建此对象的数组、函数的引用\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br></div><!--beforeend--></div><!--afterend-->5.原型模式\n6.混合模式</li>\n<li>原型、构造函数、实例、原型链\n<img src=\"./imgs/prototype.png\" alt=\"npm-script\">\n<ul>\n<li>\n<ul>\n<li>prototpye原型：指的是一个对象，实例“继承”那个对象的属性。在原型上定义的属性，通过“继承”，实例也拥有了这个属性。“继承”行为这个操作是在new操作符中进行的。</li>\n</ul>\n</li>\n<li>\n<ul>\n<li><strong>proto</strong>：实例通过__proto__访问到原型</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>instanceof的原理</li>\n</ul>\n<p>instanceof运算符用于判断一个对象的原型链是否存在一个构造函数的prototype属性。</p>\n<p>判断实例对象的属性和构造函数的属性是否是同一地址。实例对象.__proto === 构造函数.prototype ,只要是同一原型链的构造函数实例，instanceof都会被看作是true</p>\n<p>判断原型对象：实例.<strong>proto</strong>.constructor === 构造函数</p>\n<ul>\n<li>\n<p>new运算符-背后的原理</p>\n<p>1、创建一个新对象</p>\n<p>2、将构造函数的prototype赋值给新对象的__proto__;</p>\n<p>3、构造函数中的this指向新对象，并调用构造函数</p>\n<p>4、如果构造函数无返回值，或者不是引用类型，返回新对象，否则为构造函数的返回值</p>\n</li>\n<li>\n<p>new Object和Object.create的不同</p>\n<p>1、new Object是用构造函数来创建对象，添加的属性是在自身实例下；Object.create es6创建对象的另外一种方法，可以理解为继承一个对象，添加的对象是在原型上。</p>\n<!--beforebegin--><div class=\"language-bash line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>   // new Object<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 方式创建\n    var a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>  rep <span class=\"token keyword\">:</span> <span class=\"token string\">'apple'</span> <span class=\"token punctuation\">}</span>\n    var b <span class=\"token operator\">=</span> new Object<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n    console.log<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> // <span class=\"token punctuation\">{</span>rep: <span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">}</span>\n    console.log<span class=\"token punctuation\">(</span>b.__proto__<span class=\"token punctuation\">)</span> // <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    console.log<span class=\"token punctuation\">(</span>b.rep<span class=\"token punctuation\">)</span> // <span class=\"token punctuation\">{</span>rep: <span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">}</span>\n\n    // Object.create<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 方式创建\n    var a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> rep: <span class=\"token string\">'apple'</span> <span class=\"token punctuation\">}</span>\n    var b <span class=\"token operator\">=</span> Object.create<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n    console.log<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>  // <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    console.log<span class=\"token punctuation\">(</span>b.__proto__<span class=\"token punctuation\">)</span> // <span class=\"token punctuation\">{</span>rep: <span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">}</span>\n    console.log<span class=\"token punctuation\">(</span>b.rep<span class=\"token punctuation\">)</span> // <span class=\"token punctuation\">{</span>rep: <span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">}</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br></div><!--beforeend--></div><!--afterend--></li>\n</ul>\n<h2 id=\"_03-面向对象\"><a class=\"header-anchor\" href=\"#_03-面向对象\" aria-hidden=\"true\">#</a> &amp;03.面向对象</h2>\n<ul>\n<li>\n<p>类与实例</p>\n<ul>\n<li>类的声明</li>\n<li>生成实例</li>\n</ul>\n</li>\n<li>\n<p>类与继承</p>\n<ul>\n<li>如何形成继承</li>\n</ul>\n<p>1、构造函数继承</p>\n<!--beforebegin--><div class=\"language-bash line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>  //构造函数继承--实现部分继承\n   <span class=\"token keyword\">function</span> Parent<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   \tthis.name <span class=\"token operator\">=</span> <span class=\"token string\">\"parent\"</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   //构造函数继承，子类不会继承父类的prototype方法，只能继承构造函数的属性\n   Parent.prototype.say <span class=\"token operator\">=</span> function<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   \tconsole.log<span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">function</span> Child<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   \tParent.call<span class=\"token punctuation\">(</span>this<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   //call改变this指向\n   \tthis.type <span class=\"token operator\">=</span> <span class=\"token string\">'child'</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">let</span> child1 <span class=\"token operator\">=</span> new Child<span class=\"token punctuation\">;</span>\n   console.log<span class=\"token punctuation\">(</span>new Child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br></div><!--beforeend--></div><!--afterend--><p>2.原型链继承</p>\n<!--beforebegin--><div class=\"language-bash line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>//借助原型链实现继承\n\t//缺点一：新实例无法向构造函数传参\n\t//缺点二：所有的新实例都会共享父类实例的属性（原型上的属性是共享的，一个实例改变了，另一个也会一起改变）\n\t<span class=\"token keyword\">function</span> Parent2<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tthis.name <span class=\"token operator\">=</span> <span class=\"token string\">\"parent2\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">function</span> Child2<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tthis.type <span class=\"token operator\">=</span> <span class=\"token string\">\"child2\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tChild2.prototype <span class=\"token operator\">=</span> new Parent2<span class=\"token punctuation\">;</span>\n\tconsole.log<span class=\"token punctuation\">(</span>new Child2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br></div><!--beforeend--></div><!--afterend--><p>3.组合式继承</p>\n<!--beforebegin--><div class=\"language-bash line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>    //组合方式继承--原型链+构造函数\n    //弥补原型链和构造函数的缺点\n\t<span class=\"token keyword\">function</span> Parent3<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tthis.name <span class=\"token operator\">=</span> <span class=\"token string\">'parentt3'</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">function</span> Child3<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tParent3.call<span class=\"token punctuation\">(</span>this<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tthis.type <span class=\"token operator\">=</span> <span class=\"token string\">'child3'</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tChild3.prototype <span class=\"token operator\">=</span> Parent3.prototype<span class=\"token punctuation\">;</span>//优化Child3.prototype <span class=\"token operator\">=</span> Object.create<span class=\"token punctuation\">(</span>Parent3.prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tvar child5 <span class=\"token operator\">=</span> new Child3<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>ß\n\tconsole.log<span class=\"token punctuation\">(</span>child5 instanceof Parent3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  //无法区分child5是谁的实例化\n\tconsole.log<span class=\"token punctuation\">(</span>child5.constructor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    //指向Parent3\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br></div><!--beforeend--></div><!--afterend--><ul>\n<li>继承的几种方式</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"_04-闭包\"><a class=\"header-anchor\" href=\"#_04-闭包\" aria-hidden=\"true\">#</a> &amp;04.闭包</h2>\n<ul>\n<li>作用域的特殊情况\n1、函数作为参数被传递<!--beforebegin--><div class=\"language-bash line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>    //闭包--ß函数作为返回值\n    <span class=\"token keyword\">function</span> create<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> 100<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> function<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            console.log<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    const fn <span class=\"token operator\">=</span> create<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    const a <span class=\"token operator\">=</span> 200<span class=\"token punctuation\">;</span>\n    fn<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  //100\n\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br></div><!--beforeend--></div><!--afterend--></li>\n</ul>\n<p>2、函数作为返回值被返回--内存不会被释放</p>\n<!--beforebegin--><div class=\"language-bash line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>    const a <span class=\"token operator\">=</span> 100<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">function</span> print<span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tconst a <span class=\"token operator\">=</span> 200<span class=\"token punctuation\">;</span>\n\t\tfn<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">function</span> fn<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tconsole.log<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tprint<span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span>  //100\n\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br></div><!--beforeend--></div><!--afterend--><p>总结：闭包自由变量的查找，是在函数定义的地方，向上级作用域查找，不是在调用的地方！！</p>\n<ul>\n<li>闭包的实际应用场景举例\n1、隐藏数据--只提供API--例如定义模块，只提供方法，内部细节隐藏</li>\n</ul>\n<!--beforebegin--><div class=\"language-bash line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>    //闭包隐藏数据，只提供API\n\t<span class=\"token keyword\">function</span> createCache<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tconst data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>  //闭包中的数据被隐藏，不被外界访问\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n\t\t\tset: function<span class=\"token punctuation\">(</span>key, val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\tdata<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>,\n\t\t\tget: function<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">return</span> data<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tconst c <span class=\"token operator\">=</span> createCache<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> //外界无法访问createCache中的data变量\n\tc.set<span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span>, 100<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tconsole.log<span class=\"token punctuation\">(</span>c,get<span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">))</span>  //100\n\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br></div><!--beforeend--></div><!--afterend--><p>2.缓存数据--但是也是缺陷，闭包不会释放内存</p>\n<!--beforebegin--><div class=\"language-bash line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>    <span class=\"token keyword\">function</span> f1<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n　　　　var n<span class=\"token operator\">=</span>999<span class=\"token punctuation\">;</span>\n　　　　nAdd<span class=\"token operator\">=</span>function<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>n+<span class=\"token operator\">=</span>1<span class=\"token punctuation\">}</span>\n　　　　<span class=\"token keyword\">function</span> f2<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n　　　　　　alert<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n　　　　<span class=\"token punctuation\">}</span>\n　　　　<span class=\"token keyword\">return</span> f2<span class=\"token punctuation\">;</span>\n　　<span class=\"token punctuation\">}</span>\n\n　　var result<span class=\"token operator\">=</span>f1<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n　　result<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> // 999\n\n　　nAdd<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n　　result<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> // 1000\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br></div><!--beforeend--></div><!--afterend--><p>在这里，result实际上是f2,因为result被赋予了全局变量，始终存在内存当中，而f2中的变量又是依附于f1，f1中的变量不会被销毁，一直存在</p>\n<p>3.for循环使用定时器打印问题</p>\n<ul>\n<li>影响：变量会常驻内存，得不到释放，闭包不要乱用</li>\n</ul>\n<h2 id=\"_05-this\"><a class=\"header-anchor\" href=\"#_05-this\" aria-hidden=\"true\">#</a> &amp;05.this</h2>\n<p>题目：this的不同应用场景，如何取值</p>\n<p>纯粹的函数调用、作为函数方法调用、构造函数调用、bind/call/apply调用、ES6 class调用、箭头函数</p>\n<p>this取值是在调用时决定的</p>\n<!--beforebegin--><div class=\"language-bash line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>    const person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t\tname: <span class=\"token string\">'as'</span>,\n\t\tsay<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tconsole.log<span class=\"token punctuation\">(</span>this<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>,\n\t\twait<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tconsole.log<span class=\"token punctuation\">(</span>this<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    //this指向当前调用对象\n\t\t\tsetTimeout<span class=\"token punctuation\">(</span>function<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\tconsole.log<span class=\"token punctuation\">(</span>this<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   //this <span class=\"token operator\">==</span> window--此时是setTimeout本身触发的执行，相当于window在直接调用\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>,\n\t\twaitAgain<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tconsole.log<span class=\"token punctuation\">(</span>this<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     //this指向当前调用对象\n\t\t\tsetTimeout<span class=\"token punctuation\">((</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n\t\t\t\tconsole.log<span class=\"token punctuation\">(</span>this<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    //this <span class=\"token operator\">==</span> person--箭头函数中的this，指向上一级作用域中的this\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br></div><!--beforeend--></div><!--afterend--><ul>\n<li>手写一个bind函数-改变this的指向</li>\n</ul>\n<!--beforebegin--><div class=\"language-bash line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>    <span class=\"token keyword\">function</span> fn1<span class=\"token punctuation\">(</span>a, b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tconsole.log<span class=\"token punctuation\">(</span>this<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tconsole.log<span class=\"token punctuation\">(</span>a, b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"this is fn1\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t//模拟bind\n\tFunction.prototype.bind1 <span class=\"token operator\">=</span> function<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t//将参数拆为数组\n\t\tconst args <span class=\"token operator\">=</span> Array.prototype.slice.call<span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t//获取this--数组第一项\n\t\tconst t <span class=\"token operator\">=</span> args.shift<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t//fn1.bind中的fn1\n\t\tconst self <span class=\"token operator\">=</span> this<span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">return</span> function<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> self.apply<span class=\"token punctuation\">(</span>t, args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\tconst fn2 <span class=\"token operator\">=</span> fn1.bind1<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>x: 100<span class=\"token punctuation\">}</span>, 10, 20<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tconst res <span class=\"token operator\">=</span> fn2<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tconsole.log<span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br></div><!--beforeend--></div><!--afterend--><h2 id=\"_05-同步和异步\"><a class=\"header-anchor\" href=\"#_05-同步和异步\" aria-hidden=\"true\">#</a> &amp;05.同步和异步</h2>\n<ul>\n<li>同步和异步的区别\n<ul>\n<li>js是单线程语言，只能同时做一件事情。</li>\n<li>js和DOM渲染共用同一个线程，因为js可修改DOM结构</li>\n<li>遇到等待（网络请求，定时任务）不能卡住--异步，解决单线程等待问题</li>\n<li>通过callback回调函数调用</li>\n</ul>\n</li>\n<li>手写用promise加载一张图片</li>\n<li>前端使用异步的场景有哪些\n网络请求、定时任务</li>\n</ul>\n<h2 id=\"_03-说说前端中的事件流\"><a class=\"header-anchor\" href=\"#_03-说说前端中的事件流\" aria-hidden=\"true\">#</a> &amp;03.说说前端中的事件流</h2>\n<p>事件流：页面中接收事件的顺序-事件捕获阶段、处于目标阶段、事件冒泡阶段</p>\n<h2 id=\"_04-安全类\"><a class=\"header-anchor\" href=\"#_04-安全类\" aria-hidden=\"true\">#</a> &amp;04.安全类</h2>\n<h2 id=\"_04-js的new-操作符做了哪些事情\"><a class=\"header-anchor\" href=\"#_04-js的new-操作符做了哪些事情\" aria-hidden=\"true\">#</a> &amp;04.js的new 操作符做了哪些事情</h2>\n<h2 id=\"_05-js中的垃圾回收机制\"><a class=\"header-anchor\" href=\"#_05-js中的垃圾回收机制\" aria-hidden=\"true\">#</a> &amp;05.js中的垃圾回收机制</h2>\n<p>必要性：JavaScript程序每次在创建字符串、对象等都会计算其大小，分配相应的内存空间，最终都会释放这些内存以便再利用。如果没有垃圾回收机制，很容易导致内存分配完，导致系统崩溃。JavaScript解释器可以检测到何时程序不再使用一个对象。</p>\n<p>垃圾回收机制方法：标记清除、计数引用</p>\n<h2 id=\"_06-说一下commonjs、amd和cmd\"><a class=\"header-anchor\" href=\"#_06-说一下commonjs、amd和cmd\" aria-hidden=\"true\">#</a> &amp;06.说一下commonjs、AMD和CMD</h2>\n</ContentSlotsDistributor>\n",null]}
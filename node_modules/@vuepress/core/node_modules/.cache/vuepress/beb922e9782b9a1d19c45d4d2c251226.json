{"remainingRequest":"/Users/xiaohanghang/Desktop/front/code/zh-doc/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/xiaohanghang/Desktop/front/code/zh-doc/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/xiaohanghang/Desktop/front/code/zh-doc/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/xiaohanghang/Desktop/front/code/zh-doc/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/xiaohanghang/Desktop/front/code/zh-doc/docs/VUE/Console/A002.md?vue&type=template&id=d4b59a16&","dependencies":[{"path":"/Users/xiaohanghang/Desktop/front/code/zh-doc/docs/VUE/Console/A002.md","mtime":1581571682000},{"path":"/Users/xiaohanghang/Desktop/front/code/zh-doc/node_modules/cache-loader/dist/cjs.js","mtime":1581571682000},{"path":"/Users/xiaohanghang/Desktop/front/code/zh-doc/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1581571684000},{"path":"/Users/xiaohanghang/Desktop/front/code/zh-doc/node_modules/cache-loader/dist/cjs.js","mtime":1581571682000},{"path":"/Users/xiaohanghang/Desktop/front/code/zh-doc/node_modules/vue-loader/lib/index.js","mtime":1581571684000},{"path":"/Users/xiaohanghang/Desktop/front/code/zh-doc/node_modules/@vuepress/markdown-loader/index.js","mtime":1581571682000}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"ContentSlotsDistributor\",\n    { attrs: { \"slot-key\": _vm.$parent.slotKey } },\n    [\n      _c(\"h1\", { attrs: { id: \"a001-vue源码解析（二）-小节\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: {\n              href: \"#a001-vue源码解析（二）-小节\",\n              \"aria-hidden\": \"true\"\n            }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" A001_VUE源码解析（二）--小节\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"h2\", { attrs: { id: \"object-defineproperty\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#object-defineproperty\", \"aria-hidden\": \"true\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" Object.defineProperty\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [_vm._v(\"定义data数据--可观测\")]),\n      _vm._v(\" \"),\n      _c(\"h2\", { attrs: { id: \"响应式追踪原理的依赖收集追踪原理\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: {\n              href: \"#响应式追踪原理的依赖收集追踪原理\",\n              \"aria-hidden\": \"true\"\n            }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" 响应式追踪原理的依赖收集追踪原理\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _c(\"img\", {\n          attrs: { src: require(\"./img/A002/watcher.png\"), alt: \"npm-script\" }\n        })\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\n          \"依赖收集：刚开始，我们都知道data用Object.defineProperty来定义。当一个获取一个数据的时候，会触发reactiveGetter把当前的watcher对象加入队列当中，收集到Dep类当中去。如果该数据被改写，会触发reactiveGetter方法，通过Dep类中的通知函数，触发所有watcher对象的update函数。\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [_vm._v(\"总结：get进行依赖收集，set通过观察者来更新视图\")]),\n      _vm._v(\" \"),\n      _c(\"h2\", { attrs: { id: \"实现virtual-dom下的一个vnode节点\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: {\n              href: \"#实现virtual-dom下的一个vnode节点\",\n              \"aria-hidden\": \"true\"\n            }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" 实现Virtual Dom下的一个VNode节点\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\n          \"vue中，render function会将节点转为VNode节点。virtual dom实际上就是一颗以JavaScript对象为基础的一颗dom树，用对象属性来描述节点，实际上只是一层对dom层的抽象，然后通过一系列的操作映射到真实环境上，因为virtual dom是以JavaScript作为依赖，因此具有垮平台性。\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _c(\"img\", {\n          attrs: { src: require(\"./img/A002/Vnode.png\"), alt: \"npm-script\" }\n        })\n      ]),\n      _vm._v(\" \"),\n      _c(\"h2\", { attrs: { id: \"template模版是如何通过compile编译的\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: {\n              href: \"#template模版是如何通过compile编译的\",\n              \"aria-hidden\": \"true\"\n            }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" template模版是如何通过Compile编译的\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"h2\", { attrs: { id: \"template模版是如何通过compile编译的-2\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: {\n              href: \"#template模版是如何通过compile编译的-2\",\n              \"aria-hidden\": \"true\"\n            }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" template模版是如何通过Compile编译的\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\n          \"diff算法：通过同层的树节点进行比较而非对树进行逐层搜索遍历的方式，所以时间负责度只有O(n)，得到差异之后，会将这些差异更新到视图上\"\n        )\n      ])\n    ]\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}
{"remainingRequest":"/Users/cassie/Desktop/work2/person/zh_doc/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/cassie/Desktop/work2/person/zh_doc/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/cassie/Desktop/work2/person/zh_doc/docs/NOTE/Front/Js.md?vue&type=template&id=06cc6537&","dependencies":[{"path":"/Users/cassie/Desktop/work2/person/zh_doc/docs/NOTE/Front/Js.md","mtime":1581394715917},{"path":"/Users/cassie/Desktop/work2/person/zh_doc/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cassie/Desktop/work2/person/zh_doc/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/cassie/Desktop/work2/person/zh_doc/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cassie/Desktop/work2/person/zh_doc/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/cassie/Desktop/work2/person/zh_doc/node_modules/@vuepress/markdown-loader/index.js","mtime":1546968779000}],"contextDependencies":[],"result":["\n<ContentSlotsDistributor :slot-key=\"$parent.slotKey\"><h1 id=\"javascript面试题总结\"><a class=\"header-anchor\" href=\"#javascript面试题总结\" aria-hidden=\"true\">#</a> JavaScript面试题总结</h1>\n<div class=\"tip custom-block\"><p class=\"custom-block-title\">契子</p>\n<ul>\n<li>https://github.com/abc-club/free-resources/blob/master/INTERVIEW.md</li>\n<li>https://github.com/markyun/My-blog/tree/master/Front-end-Developer-Questions/Questions-and-Answers</li>\n<li>https://yuchengkai.cn/docs/frontend/#typeof</li>\n<li>https://juejin.im/book/5bdc715fe51d454e755f75ef</li>\n<li>https://juejin.im/post/5e166cc5f265da5d57543102</li>\n<li>https://juejin.im/post/5c64d15d6fb9a049d37f9c20</li>\n<li>https://juejin.im/post/5d3edad9f265da03a652f133#21-webpack</li>\n</ul>\n</div>\n<h2 id=\"_01-题一-变量提升\"><a class=\"header-anchor\" href=\"#_01-题一-变量提升\" aria-hidden=\"true\">#</a> &amp;01.题一--变量提升</h2>\n<ul>\n<li>var和let的区别，变量提升</li>\n</ul>\n<p>var存在变量提升</p>\n<!--beforebegin--><div class=\"language-bash line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code><span class=\"token keyword\">function</span> sayHi<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console.log<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console.log<span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  var name <span class=\"token operator\">=</span> <span class=\"token string\">\"Lydia\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> age <span class=\"token operator\">=</span> 21<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nsayHi<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   //undefined, ReferenceError\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br></div><!--beforeend--></div><!--afterend--><ul>\n<li>let 存在变量提升，只是存在一个“暂时死区”，在变量初始化或者未赋值前不被允许访问</li>\n</ul>\n<!--beforebegin--><div class=\"language-bash line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code><span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'ConardLi'</span>\n<span class=\"token punctuation\">{</span>\n  console.log<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> // Uncaught ReferenceError: name is not defined\n  <span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'code秘密花园'</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br></div><!--beforeend--></div><!--afterend--><h2 id=\"_02-题二-块级作用域\"><a class=\"header-anchor\" href=\"#_02-题二-块级作用域\" aria-hidden=\"true\">#</a> &amp;02.题二--块级作用域</h2>\n<ul>\n<li>let具备块级作用域，var全局作用域；异步执行和同步执行</li>\n</ul>\n<!--beforebegin--><div class=\"language-bash line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>var i <span class=\"token operator\">=</span> 0<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> 3<span class=\"token punctuation\">;</span> i++<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  setTimeout<span class=\"token punctuation\">((</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> console.log<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>, 1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  //3 3 3\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>let i <span class=\"token operator\">=</span> 0<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> 3<span class=\"token punctuation\">;</span> i++<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  setTimeout<span class=\"token punctuation\">((</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> console.log<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>, 1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   //0 1 2\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br></div><!--beforeend--></div><!--afterend--><h2 id=\"_03-题三-es6箭头函数的作用域\"><a class=\"header-anchor\" href=\"#_03-题三-es6箭头函数的作用域\" aria-hidden=\"true\">#</a> &amp;03.题三--ES6箭头函数的作用域</h2>\n<ul>\n<li>\n<p>箭头函数的作用域（this为父作用域的this，不是调用时的this）\n箭头函数的作用域永远指向其父作用域，任何方法都改变不了，普通函数的this指向调用它的那个对象</p>\n</li>\n<li>\n<p>箭头函数不能成为构造函数，不能使用new</p>\n</li>\n</ul>\n<!--beforebegin--><div class=\"language-bash line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>const shape <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  radius: 10,\n  diameter<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> this.radius * 2<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>,\n  perimeter: <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> 2 * Math.PI * this.radius\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nshape.diameter<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    //20\nshape.perimeter<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   //NaN\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br></div><!--beforeend--></div><!--afterend--><h2 id=\"_04-题四\"><a class=\"header-anchor\" href=\"#_04-题四\" aria-hidden=\"true\">#</a> &amp;04.题四--</h2>\n<ul>\n<li>一元加号会尝试把boolean类型转换为数字，true转换为1，false转换为0</li>\n</ul>\n<!--beforebegin--><div class=\"language-bash line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>+true<span class=\"token punctuation\">;</span>         // 1\n<span class=\"token operator\">!</span><span class=\"token string\">\"Lydia\"</span><span class=\"token punctuation\">;</span>      // 0\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div><!--beforeend--></div><!--afterend--><h2 id=\"_05-题五-对象引用\"><a class=\"header-anchor\" href=\"#_05-题五-对象引用\" aria-hidden=\"true\">#</a> &amp;05.题五--对象引用</h2>\n<ul>\n<li>在JavaScript中，当使用等号使对象互相相等时，其实是引用同一个原型对象，此时更改一个对象的值，可以改变所有对象的值</li>\n<li>JS 六大基础类型：Boolean、String、Number、Undefined、Null、Object（复杂数据类型）</li>\n</ul>\n<!--beforebegin--><div class=\"language-bash line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code><span class=\"token keyword\">let</span> c <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> greeting: <span class=\"token string\">\"Hey!\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> d<span class=\"token punctuation\">;</span>\n\nd <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\nc.greeting <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">;</span>\nconsole.log<span class=\"token punctuation\">(</span>d.greeting<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   //hello\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br></div><!--beforeend--></div><!--afterend--><h2 id=\"_06-题六-对象类型判断\"><a class=\"header-anchor\" href=\"#_06-题六-对象类型判断\" aria-hidden=\"true\">#</a> &amp;06.题六--对象类型判断</h2>\n<ul>\n<li>== 会引发隐式类型转换</li>\n<li>new Number是一个内置的构造函数：有一堆额外的功能，是一个对象</li>\n</ul>\n<!--beforebegin--><div class=\"language-bash line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> 3<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> new Number<span class=\"token punctuation\">(</span>3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> c <span class=\"token operator\">=</span> 3<span class=\"token punctuation\">;</span>\n\nconsole.log<span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     //true\nconsole.log<span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span><span class=\"token operator\">=</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    //false\nconsole.log<span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span><span class=\"token operator\">=</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    //false\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br></div><!--beforeend--></div><!--afterend--><h2 id=\"_07-题七-static静态方法\"><a class=\"header-anchor\" href=\"#_07-题七-static静态方法\" aria-hidden=\"true\">#</a> &amp;07.题七--static静态方法</h2>\n<ul>\n<li>JavaScript的静态方法仅在创建它们的构造函数中存在，并且不能传递给任何他们的子级</li>\n</ul>\n<!--beforebegin--><div class=\"language-bash line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>class Chameleon <span class=\"token punctuation\">{</span>\n  static colorChange<span class=\"token punctuation\">(</span>newColor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    this.newColor <span class=\"token operator\">=</span> newColor<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  constructor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> newColor <span class=\"token operator\">=</span> <span class=\"token string\">\"green\"</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    this.newColor <span class=\"token operator\">=</span> newColor<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nconst freddie <span class=\"token operator\">=</span> new Chameleon<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> newColor: <span class=\"token string\">\"purple\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nfreddie.colorChange<span class=\"token punctuation\">(</span><span class=\"token string\">\"orange\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   //TypeError\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br></div><!--beforeend--></div><!--afterend--><h2 id=\"_08-题八\"><a class=\"header-anchor\" href=\"#_08-题八\" aria-hidden=\"true\">#</a> &amp;08.题八--</h2>\n<ul>\n<li>可以使用“use strict”。 这可以确保在将变量赋值之前必须声明变量。</li>\n</ul>\n<h2 id=\"_09-题九-原型链添加方法\"><a class=\"header-anchor\" href=\"#_09-题九-原型链添加方法\" aria-hidden=\"true\">#</a> &amp;09.题九--原型链添加方法</h2>\n<ul>\n<li>如需要额外给暴露的对象添加方法，可以在对象的原型链上添加</li>\n</ul>\n<!--beforebegin--><div class=\"language-bash line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code><span class=\"token keyword\">function</span> Person<span class=\"token punctuation\">(</span>firstName, lastName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  this.firstName <span class=\"token operator\">=</span> firstName<span class=\"token punctuation\">;</span>\n  this.lastName <span class=\"token operator\">=</span> lastName<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconst member <span class=\"token operator\">=</span> new Person<span class=\"token punctuation\">(</span><span class=\"token string\">\"Lydia\"</span>, <span class=\"token string\">\"Hallie\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nPerson.getFullName <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> this.firstName + this.lastName<span class=\"token punctuation\">;</span>\n\nconsole.log<span class=\"token punctuation\">(</span>member.getFullName<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span>    //TypeError\n\nPerson.prototype.getFullName <span class=\"token operator\">=</span> XXX\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br></div><!--beforeend--></div><!--afterend--><h2 id=\"_10-题十-不使用new关键字\"><a class=\"header-anchor\" href=\"#_10-题十-不使用new关键字\" aria-hidden=\"true\">#</a> &amp;10.题十--不使用new关键字</h2>\n<ul>\n<li>当使用new时，指的是创建的新空对象；不使用new时，指的是全局对象</li>\n</ul>\n<!--beforebegin--><div class=\"language-bash line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code><span class=\"token keyword\">function</span> Person<span class=\"token punctuation\">(</span>firstName, lastName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  this.firstName <span class=\"token operator\">=</span> firstName<span class=\"token punctuation\">;</span>\n  this.lastName <span class=\"token operator\">=</span> lastName<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconst lydia <span class=\"token operator\">=</span> new Person<span class=\"token punctuation\">(</span><span class=\"token string\">\"Lydia\"</span>, <span class=\"token string\">\"Hallie\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconst sarah <span class=\"token operator\">=</span> Person<span class=\"token punctuation\">(</span><span class=\"token string\">\"Sarah\"</span>, <span class=\"token string\">\"Smith\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole.log<span class=\"token punctuation\">(</span>lydia<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          //Person <span class=\"token punctuation\">{</span>firstName: <span class=\"token string\">\"Lydia\"</span>, lastName: <span class=\"token string\">\"Hallie\"</span><span class=\"token punctuation\">}</span>\nconsole.log<span class=\"token punctuation\">(</span>sarah<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          // undefined\n\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br></div><!--beforeend--></div><!--afterend--><h2 id=\"_11-题十一-基础对象\"><a class=\"header-anchor\" href=\"#_11-题十一-基础对象\" aria-hidden=\"true\">#</a> &amp;11.题十一--基础对象</h2>\n<ul>\n<li>除基础对象外，所有对象都有原型。</li>\n</ul>\n<h2 id=\"_12-题十二-自增运算\"><a class=\"header-anchor\" href=\"#_12-题十二-自增运算\" aria-hidden=\"true\">#</a> &amp;12.题十二--自增运算</h2>\n<ul>\n<li>后缀一元运算：先返回，再增加</li>\n<li>前缀一元运算：先增加，再返回</li>\n</ul>\n<!--beforebegin--><div class=\"language-bash line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code><span class=\"token keyword\">let</span> number <span class=\"token operator\">=</span> 0<span class=\"token punctuation\">;</span>\nconsole.log<span class=\"token punctuation\">(</span>number++<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     //0\nconsole.log<span class=\"token punctuation\">(</span>++number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     //2\nconsole.log<span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       //2\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div><!--beforeend--></div><!--afterend--><h2 id=\"_13-题十三-对象比较\"><a class=\"header-anchor\" href=\"#_13-题十三-对象比较\" aria-hidden=\"true\">#</a> &amp;13.题十三--对象比较</h2>\n<ul>\n<li>在比较相等性的时候，原始类型通过他们的值进行对比，而对象通过他们的引用进行比较。</li>\n</ul>\n<!--beforebegin--><div class=\"language-bash line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code><span class=\"token keyword\">function</span> checkAge<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data <span class=\"token operator\">==</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> age: 18 <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console.log<span class=\"token punctuation\">(</span><span class=\"token string\">\"You are an adult!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data <span class=\"token operator\">==</span> <span class=\"token punctuation\">{</span> age: 18 <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console.log<span class=\"token punctuation\">(</span><span class=\"token string\">\"You are still an adult.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    console.log<span class=\"token punctuation\">(</span><span class=\"token variable\"><span class=\"token variable\">`</span>Hmm<span class=\"token punctuation\">..</span> You don't have an age I guess<span class=\"token variable\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\ncheckAge<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> age: 18 <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    //Hmm<span class=\"token punctuation\">..</span> You don't have an age I guess\n// 我们作为参数传递的对象和我们用于检查相等性的对象在内存中位于不同位置，所以它们的引用是不同的。\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br></div><!--beforeend--></div><!--afterend--><h2 id=\"_14-题十四\"><a class=\"header-anchor\" href=\"#_14-题十四\" aria-hidden=\"true\">#</a> &amp;14.题十四-</h2>\n<!--beforebegin--><div class=\"language-bash line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>var arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>1,2,4<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nconsole.log<span class=\"token punctuation\">(</span>typeof arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    //object\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div><!--beforeend--></div><!--afterend--><h2 id=\"_15-深拷贝与浅拷贝的区别\"><a class=\"header-anchor\" href=\"#_15-深拷贝与浅拷贝的区别\" aria-hidden=\"true\">#</a> &amp;15.深拷贝与浅拷贝的区别-</h2>\n<ul>\n<li>\n<p>深拷贝复制变量，对于非基本类型的变量，则递归至基本类型变量后，再复制；深拷贝后的对象与原来的对象是完全隔离的，互不影响的，对\n一个对象的修改不会影响到另一个对象</p>\n</li>\n<li>\n<p>浅拷贝是会将对象的每个属性进行依次复制，但是当对象的属性值是引用类型时，实质复制的是其引用，当引用指向的值改变时也会跟着变化。</p>\n</li>\n<li>\n<p>Object.assign是浅拷贝，只是对第一层属性进行了深拷贝</p>\n</li>\n</ul>\n<!--beforebegin--><div class=\"language-bash line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code><span class=\"token keyword\">let</span> s <span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>name: <span class=\"token punctuation\">{</span>asd: <span class=\"token string\">'123'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> d <span class=\"token operator\">=</span> Object.assign<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>, s<span class=\"token punctuation\">)</span>\nd.name.asd <span class=\"token operator\">=</span> <span class=\"token string\">'123456789'</span>\nconsole.log<span class=\"token punctuation\">(</span>d, s<span class=\"token punctuation\">)</span>     //d：<span class=\"token punctuation\">{</span>name: <span class=\"token punctuation\">{</span>asd: <span class=\"token string\">'123456789'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>    s：<span class=\"token punctuation\">{</span>name: <span class=\"token punctuation\">{</span>asd: <span class=\"token string\">'123456789'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> o <span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>name: <span class=\"token punctuation\">{</span>asd: <span class=\"token string\">'123'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> p <span class=\"token operator\">=</span> Object.assign<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>, o<span class=\"token punctuation\">)</span>\np.name <span class=\"token operator\">=</span> <span class=\"token string\">'123456789'</span>\nconsole.log<span class=\"token punctuation\">(</span>p, o<span class=\"token punctuation\">)</span>      //p：<span class=\"token punctuation\">{</span>name: 123456789<span class=\"token punctuation\">}</span>    o: <span class=\"token punctuation\">{</span>name: <span class=\"token punctuation\">{</span>asd: <span class=\"token string\">'123'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br></div><!--beforeend--></div><!--afterend--><ul>\n<li>深拷贝实现</li>\n</ul>\n<p>1.最简单的方法： JSON.parse(JSON.stringify(obj))</p>\n<!--beforebegin--><div class=\"language-bash line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>deepClone<span class=\"token punctuation\">(</span>obj, <span class=\"token function\">hash</span> <span class=\"token operator\">=</span> new WeakMap<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        if<span class=\"token punctuation\">(</span>obj instanceof RegExp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> new RegExp<span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        if<span class=\"token punctuation\">(</span>obj instanceof Date<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> new Date<span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        if<span class=\"token punctuation\">(</span>obj <span class=\"token operator\">==</span><span class=\"token operator\">=</span> null <span class=\"token operator\">||</span> typeof obj <span class=\"token operator\">!=</span><span class=\"token operator\">=</span> <span class=\"token string\">'object'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        if<span class=\"token punctuation\">(</span>hash.has<span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">))</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> hash.get<span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        //如果obj是数组，则返回<span class=\"token punctuation\">[</span>function： Array<span class=\"token punctuation\">]</span>\n        //如果obj是对象，则返回Object<span class=\"token punctuation\">[</span>function: Object<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">let</span> t <span class=\"token operator\">=</span> new obj.constructor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        hash.set<span class=\"token punctuation\">(</span>obj, t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        for<span class=\"token punctuation\">(</span>let key <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          if<span class=\"token punctuation\">(</span>obj.hasOwnPropery<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">))</span> <span class=\"token punctuation\">{</span>\n            t<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> deepClone<span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>, hash<span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> t<span class=\"token punctuation\">;</span>\n\n      <span class=\"token punctuation\">}</span>,\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br></div><!--beforeend--></div><!--afterend--><ul>\n<li>WeakMap对象保存键值对的时候，与Map不同的是其键值必须是对象，因为键是弱引用，在键对象消失后自动释放内存</li>\n</ul>\n<p>好处：1.element中使用点击或监听，可防止内存泄漏</p>\n<pre><code>2.可用来部署类中的私有属性\n</code></pre>\n<h2 id=\"_16-js-this的指向\"><a class=\"header-anchor\" href=\"#_16-js-this的指向\" aria-hidden=\"true\">#</a> &amp;16.js this的指向-</h2>\n<ul>\n<li>默认绑定：不加任何修饰符直接调用函数</li>\n</ul>\n<!--beforebegin--><div class=\"language-bash line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code><span class=\"token keyword\">function</span> foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console.log<span class=\"token punctuation\">(</span>this.a<span class=\"token punctuation\">)</span>   // 输出 a\n<span class=\"token punctuation\">}</span>\n\nvar a <span class=\"token operator\">=</span> 2<span class=\"token punctuation\">;</span>  //  变量声明到全局对象中\n\nfoo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br></div><!--beforeend--></div><!--afterend--><ul>\n<li>显示绑定：函数创建时，this的对象指向调用它的对象</li>\n</ul>\n<!--beforebegin--><div class=\"language-bash line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code><span class=\"token keyword\">function</span> foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console.log<span class=\"token punctuation\">(</span>this.a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  a: 1,\n  foo,\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> obj2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  a: 2,\n  foo,\n<span class=\"token punctuation\">}</span>\n\nobj1.foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   // 输出 1\nobj2.foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   // 输出 2\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br></div><!--beforeend--></div><!--afterend--><ul>\n<li>显示绑定：使用call()、apply()、bind()中改变this的指向，call和apply是立即执行函数</li>\n</ul>\n<!--beforebegin--><div class=\"language-bash line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code><span class=\"token keyword\">function</span> foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console.log<span class=\"token punctuation\">(</span>this.a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  // 输出 1\n  bar.apply<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>a: 2<span class=\"token punctuation\">}</span>, arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> bar<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console.log<span class=\"token punctuation\">(</span>this.a + b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  // 输出 5\n<span class=\"token punctuation\">}</span>\n\nvar a <span class=\"token operator\">=</span> 1<span class=\"token punctuation\">;</span>\nfoo<span class=\"token punctuation\">(</span>3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br></div><!--beforeend--></div><!--afterend--><ul>\n<li>new关键字可以改变this的指向：创新一个新的对象，执行prototype连接，改变this的调用</li>\n</ul>\n<!--beforebegin--><div class=\"language-bash line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code><span class=\"token keyword\">function</span> Foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    this.x <span class=\"token operator\">=</span> 10<span class=\"token punctuation\">;</span>\n    console.log<span class=\"token punctuation\">(</span>this<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    //Foo <span class=\"token punctuation\">{</span>x:10<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\nvar foo <span class=\"token operator\">=</span> new Foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole.log<span class=\"token punctuation\">(</span>foo.x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      //10\n\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br></div><!--beforeend--></div><!--afterend--><!--beforebegin--><div class=\"language-bash line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code><span class=\"token keyword\">function</span> Foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    this.x <span class=\"token operator\">=</span> 10<span class=\"token punctuation\">;</span>\n    console.log<span class=\"token punctuation\">(</span>this<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    //Window\n<span class=\"token punctuation\">}</span>\nvar foo <span class=\"token operator\">=</span> Foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole.log<span class=\"token punctuation\">(</span>foo.x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      //undefined\n\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br></div><!--beforeend--></div><!--afterend--><ul>\n<li>坑一：对象方法相关</li>\n</ul>\n<!--beforebegin--><div class=\"language-bash line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>var obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    x: 10,\n    foo: <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console.log<span class=\"token punctuation\">(</span>this<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        //Object\n        console.log<span class=\"token punctuation\">(</span>this.x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      //10\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nobj.foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br></div><!--beforeend--></div><!--afterend--><!--beforebegin--><div class=\"language-bash line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>var obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    a: 1,\n    foo: function<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">function</span> fo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console.log<span class=\"token punctuation\">(</span>this<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    //window\n        console.log<span class=\"token punctuation\">(</span>this.a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  //undefined\n      <span class=\"token punctuation\">}</span>\n      fo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  obj.foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br></div><!--beforeend--></div><!--afterend--><p>说明：fo虽然是在obj里面调用，但是最终执行时，还是一个普通的函数，this指向window</p>\n<ul>\n<li>箭头函数对this的修复--始终指向外层调用者</li>\n</ul>\n<!--beforebegin--><div class=\"language-bash line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>var obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    x: 10,\n    foo: function<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        var fn <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n                    console.log<span class=\"token punctuation\">(</span>this<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      //Object <span class=\"token punctuation\">{</span>x: 10<span class=\"token punctuation\">}</span>\n                    console.log<span class=\"token punctuation\">(</span>this.x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    //10\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        fn<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\nobj.foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br></div><!--beforeend--></div><!--afterend--><p>参考文章：\nhttps://www.cnblogs.com/pssp/p/5216085.html</p>\n<p>https://zhuanlan.zhihu.com/p/25294187</p>\n<h2 id=\"_17-js-闭包\"><a class=\"header-anchor\" href=\"#_17-js-闭包\" aria-hidden=\"true\">#</a> &amp;17.js 闭包##</h2>\n<ul>\n<li>\n<p>作用一：读取函数内部的变量（作用域链）</p>\n</li>\n<li>\n<p>作用二：可以让这些变量始终保持在内存中</p>\n</li>\n</ul>\n<h2 id=\"_18-js-箭头函数和普通函数的区别\"><a class=\"header-anchor\" href=\"#_18-js-箭头函数和普通函数的区别\" aria-hidden=\"true\">#</a> &amp;18.js 箭头函数和普通函数的区别</h2>\n<ol>\n<li>\n<p>箭头函数是匿名函数，不能作为构造函数，不能使用new</p>\n</li>\n<li>\n<p>箭头函数不绑定arguments，取而代之的是rest参数...解决</p>\n</li>\n</ol>\n<!--beforebegin--><div class=\"language-bash line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code><span class=\"token keyword\">function</span> A<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console.log<span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nA<span class=\"token punctuation\">(</span>1,2,3,4,5,8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  //  <span class=\"token punctuation\">[</span>1, 2, 3, 4, 5, 8, callee: ƒ, Symbol<span class=\"token punctuation\">(</span>Symbol.iterator<span class=\"token punctuation\">)</span>: ƒ<span class=\"token punctuation\">]</span>\n\n\n<span class=\"token keyword\">let</span> B <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>\n  console.log<span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nB<span class=\"token punctuation\">(</span>2,92,32,32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   // Uncaught ReferenceError: arguments is not defined\n\n\n<span class=\"token keyword\">let</span> C <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">..</span>.c<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  console.log<span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nC<span class=\"token punctuation\">(</span>3,82,32,11323<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  // <span class=\"token punctuation\">[</span>3, 82, 32, 11323<span class=\"token punctuation\">]</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br></div><!--beforeend--></div><!--afterend--><ol start=\"3\">\n<li>箭头函数不绑定this，会捕获其所在上下文的this值，作为自己的this值</li>\n</ol>\n<!--beforebegin--><div class=\"language-bash line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>var obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  a: 10,\n  b: <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    console.log<span class=\"token punctuation\">(</span>this.a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> // undefined\n    console.log<span class=\"token punctuation\">(</span>this<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> // Window <span class=\"token punctuation\">{</span>postMessage: ƒ, blur: ƒ, focus: ƒ, close: ƒ, frames: Window, …<span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>,\n  c: function<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console.log<span class=\"token punctuation\">(</span>this.a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> // 10\n    console.log<span class=\"token punctuation\">(</span>this<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> // <span class=\"token punctuation\">{</span>a: 10, b: ƒ, c: ƒ<span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\nobj.b<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \nobj.c<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br></div><!--beforeend--></div><!--afterend--><!--beforebegin--><div class=\"language-bash line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>var obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  a: 10,\n  b: function<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    console.log<span class=\"token punctuation\">(</span>this.a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> //10\n  <span class=\"token punctuation\">}</span>,\n  c: function<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>\n           console.log<span class=\"token punctuation\">(</span>this.a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> //10\n     <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\nobj.b<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \nobj.c<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br></div><!--beforeend--></div><!--afterend--><h2 id=\"_18-js\"><a class=\"header-anchor\" href=\"#_18-js\" aria-hidden=\"true\">#</a> &amp;18.js</h2>\n<ul>\n<li>打印对象的时候会自动调用toString方法</li>\n</ul>\n<h2 id=\"_19-css-替换元素\"><a class=\"header-anchor\" href=\"#_19-css-替换元素\" aria-hidden=\"true\">#</a> &amp;19.css-- 替换元素</h2>\n<ul>\n<li>替换元素就是根据浏览器元素的标签和属性，来决定元素的具体显示内容，在其显示中生成了框，例如：</li>\n</ul>\n<!--beforebegin--><div class=\"language-bash line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code><span class=\"token operator\">&lt;</span>img<span class=\"token operator\">></span>、<span class=\"token operator\">&lt;</span>input<span class=\"token operator\">></span>、<span class=\"token operator\">&lt;</span>textarea<span class=\"token operator\">></span>、<span class=\"token operator\">&lt;</span>select<span class=\"token operator\">></span>、<span class=\"token operator\">&lt;</span>object<span class=\"token operator\">></span>\n\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div><!--beforeend--></div><!--afterend--><h2 id=\"_20-浏览器-常规\"><a class=\"header-anchor\" href=\"#_20-浏览器-常规\" aria-hidden=\"true\">#</a> &amp;20.浏览器 --常规</h2>\n<ul>\n<li>https://juejin.im/post/5df5bcea6fb9a016091def69</li>\n</ul>\n<h2 id=\"_21-js-原型链\"><a class=\"header-anchor\" href=\"#_21-js-原型链\" aria-hidden=\"true\">#</a> &amp;21.js --原型链</h2>\n<p>demo1.</p>\n<!--beforebegin--><div class=\"language-bash line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code><span class=\"token keyword\">function</span> People<span class=\"token punctuation\">(</span>name, age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    this.name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    this.age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n    this.eat <span class=\"token operator\">=</span> function<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console.log<span class=\"token punctuation\">(</span>this.name + <span class=\"token string\">'iseating'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">let</span> p1 <span class=\"token operator\">=</span> new People<span class=\"token punctuation\">(</span><span class=\"token string\">'baozi'</span>, <span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> p2 <span class=\"token operator\">=</span> new People<span class=\"token punctuation\">(</span><span class=\"token string\">'baozi2'</span>, <span class=\"token string\">'2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console.log<span class=\"token punctuation\">(</span>p1.eat <span class=\"token operator\">==</span> p2.eat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    //false\n\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br></div><!--beforeend--></div><!--afterend--><p>new 关键词会创建不同的对象，eat函数对比为false表示，p1和p2被分配在堆内存中，如果创建很多，会导致内存不够使用</p>\n<!--beforebegin--><div class=\"language-bash line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code><span class=\"token keyword\">function</span> People<span class=\"token punctuation\">(</span>name, age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    this.name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    this.age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n    this.eat <span class=\"token operator\">=</span> function<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console.log<span class=\"token punctuation\">(</span>this.name + <span class=\"token string\">'iseating'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  People.prototype.eat <span class=\"token operator\">=</span> function<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console.log<span class=\"token punctuation\">(</span>this.name + <span class=\"token string\">'eating'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">let</span> p1 <span class=\"token operator\">=</span> new People<span class=\"token punctuation\">(</span><span class=\"token string\">'baozi'</span>, 1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> p2 <span class=\"token operator\">=</span> new People<span class=\"token punctuation\">(</span><span class=\"token string\">'baozi'</span>, 2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console.log<span class=\"token punctuation\">(</span>p1.eat <span class=\"token operator\">==</span> p2.eat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   //true\n\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br></div><!--beforeend--></div><!--afterend--><p>eat函数指向堆中同一个地址</p>\n<ul>\n<li>prototype原型；__proto__原型链；Object.prototype.<strong>proto</strong> == null</li>\n</ul>\n<!--beforebegin--><div class=\"language-bash line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>Object.__proto__ <span class=\"token operator\">==</span><span class=\"token operator\">=</span> Function.prototype<span class=\"token punctuation\">;</span>\nFunction.prototype.__proto__ <span class=\"token operator\">==</span><span class=\"token operator\">=</span> Object.prototype<span class=\"token punctuation\">;</span>\nObject.prototype.__proto__ <span class=\"token operator\">==</span><span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div><!--beforeend--></div><!--afterend--><h2 id=\"_22-js-event-loop代码的执行顺序\"><a class=\"header-anchor\" href=\"#_22-js-event-loop代码的执行顺序\" aria-hidden=\"true\">#</a> &amp;22.js --event loop代码的执行顺序</h2>\n<p>event loop都不陌生，是指主线程从“任务队列”中循环读取任务</p>\n<!--beforebegin--><div class=\"language-bash line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>setTimeout<span class=\"token punctuation\">(</span>function <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console.log<span class=\"token punctuation\">(</span>3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>, 0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nPromise.resolve<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>.then<span class=\"token punctuation\">(</span>function <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console.log<span class=\"token punctuation\">(</span>2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole.log<span class=\"token punctuation\">(</span>1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n//1,2,4\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br></div><!--beforeend--></div><!--afterend--><p>以上：js的执行顺序是同步任务在主线程中优先执行；异步执行代码顺序如下：script(主程序代码)—&gt;process.nextTick—&gt;Promises...——&gt;setTimeout——&gt;setInterval——&gt;setImmediate——&gt; I/O——&gt;UI rendering</p>\n<!--beforebegin--><div class=\"language-bash line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>setTimeout<span class=\"token punctuation\">(</span>function<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>console.log<span class=\"token punctuation\">(</span>1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>,0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nnew Promise<span class=\"token punctuation\">(</span>function<span class=\"token punctuation\">(</span>resolve,reject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n   console.log<span class=\"token punctuation\">(</span>2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   resolve<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>.then<span class=\"token punctuation\">(</span>function<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>console.log<span class=\"token punctuation\">(</span>3<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>.then<span class=\"token punctuation\">(</span>function<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>console.log<span class=\"token punctuation\">(</span>4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nprocess.nextTick<span class=\"token punctuation\">(</span>function<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>console.log<span class=\"token punctuation\">(</span>5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole.log<span class=\"token punctuation\">(</span>6<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n//输出2,6,5,3,4,1\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br></div><!--beforeend--></div><!--afterend--><h2 id=\"_23-js函数优先级\"><a class=\"header-anchor\" href=\"#_23-js函数优先级\" aria-hidden=\"true\">#</a> &amp;23.js函数优先级</h2>\n<ul>\n<li>函数表达式比匿名函数优先级高；变量提升，函数提升</li>\n</ul>\n<p>https://www.cnblogs.com/xxcanghai/p/4991870.html</p>\n<p>https://www.cnblogs.com/xxcanghai/p/4991870.html</p>\n<p>https://juejin.im/post/5df50a60518825121f699c4d</p>\n<!--beforebegin--><div class=\"language-bash line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code> <span class=\"token keyword\">function</span> getName<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console.log<span class=\"token punctuation\">(</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  var getName <span class=\"token operator\">=</span> function<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console.log<span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  getName<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  //1\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br></div><!--beforeend--></div><!--afterend--><h2 id=\"_24-js深入浅出之-词法作用域和动态作用域\"><a class=\"header-anchor\" href=\"#_24-js深入浅出之-词法作用域和动态作用域\" aria-hidden=\"true\">#</a> &amp;24.js深入浅出之--词法作用域和动态作用域</h2>\n<ul>\n<li>js采用词法作用域，函数的作用域在函数定义的时候确定</li>\n<li>词法作用域相对的就是动态作用域，函数的作用域就是在函数调用的时候确定</li>\n<li>在进入执行上下文时，首先会处理函数声明，其次会处理变量声明，如果如果变量名称跟已经声明的形式参数或函数相同，则变量声明不会干扰已经存在的这类属性。</li>\n</ul>\n<!--beforebegin--><div class=\"language-bash line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code> var value <span class=\"token operator\">=</span> 1<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console.log<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> bar<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    var value <span class=\"token operator\">=</span> 2<span class=\"token punctuation\">;</span>\n    foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nbar<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    //1\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br></div><!--beforeend--></div><!--afterend--><!--beforebegin--><div class=\"language-bash line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>var scope <span class=\"token operator\">=</span> <span class=\"token string\">\"global scope\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> checkscope<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    var scope <span class=\"token operator\">=</span> <span class=\"token string\">\"local scope\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">function</span> f<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> scope<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> f<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\ncheckscope<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  //local scope\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br></div><!--beforeend--></div><!--afterend--><p>以上，因为js是词法作用域，在声明的时候作用域已经绑定，因此打印出声明时的值。</p>\n<!--beforebegin--><div class=\"language-bash line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>console.log<span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  //打印出函数体\n\n<span class=\"token keyword\">function</span> foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    console.log<span class=\"token punctuation\">(</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nvar foo <span class=\"token operator\">=</span> 1<span class=\"token punctuation\">;</span>    \n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br></div><!--beforeend--></div><!--afterend--><p>以上，函数声明优先级比变量声明高，不会被覆盖</p>\n<h2 id=\"_25-js原型与原型链\"><a class=\"header-anchor\" href=\"#_25-js原型与原型链\" aria-hidden=\"true\">#</a> &amp;25.js原型与原型链</h2>\n<ul>\n<li>prototype</li>\n<li><strong>proto</strong></li>\n<li>new</li>\n<li>call()/apply()/bind()</li>\n<li>this</li>\n</ul>\n<p>问题1：了解this，说说this的作用</p>\n<p>答：this是函数上下文被创建时确定的，即this的指向其实是函数被调用时确定的。同一个函数，由于调用方式的不同，可能this的对象不同。在函数执行过程中，this一旦被确定，就不会更改。</p>\n<h2 id=\"_26-es6常用的新特性\"><a class=\"header-anchor\" href=\"#_26-es6常用的新特性\" aria-hidden=\"true\">#</a> &amp;26.ES6常用的新特性</h2>\n<p>1、不一样的声明变量：const和let</p>\n<p>ES6推荐使用let声明局部变量。let表示声明变量，const表示声明常量；</p>\n<p>2.模版字符串</p>\n<p>基本的字符串格式化，将表达式嵌入字符串进行拼接。</p>\n<p>3.箭头函数</p>\n<p>继承当前上下文this的关键字</p>\n<p>4.函数的参数默认值</p>\n<p>5.数组解构</p>\n</ContentSlotsDistributor>\n",null]}